Top 500 lines by score
--------------------------------------------------
"Generate Python code that imports the `bytecode` module in Python 2."
"Generate Python code that reads, writes, and segments WebVTT files using the `webvtt` library."
"Generate Python code that parses, modifies, and composes SRT files using the `subtitle` library."
"Generate Python code that imports the Haiku library and builds a simple neural network using JAX."
"Generate Python code that wraps the UnRAR library using ctypes to extract files from RAR archives."
"Generate Python code that imports the deflate64 module and uses it to compress and decompress data."
"Generate Python code that uses the `docopt` library to create typing stubs for command-line interfaces."
"Generate Python code that uses the H2O library to perform scalable machine learning on a Spark cluster."
"Generate Python code that imports the typeshed module and accesses its stubs using the `stubs` attribute."
"Generate Python code that uses the `onnx` library to export a trained PaddlePaddle model to an ONNX file."
"Generate Python code that imports a module by physical file path:\n\n`import_module('path/to/module.py')`"
"Generate Python code that parses a CRON string and schedules the associated job using the schedule module."
"Generate Python code that reads and modifies the contents of a file in place, using the `fileinput` module."
"Generate Python code that uses the Pillow library to interact with Tesseract-OCR and perform OCR on images."
"Generate Python code that creates a command-line utility for creating zip files using the `zipfile` module."
"Generate Python code that imports the necessary modules and creates an API Gateway authorizer using AWS CDK."
"Generate Python code that uses the TorchServe library to serve a trained neural network model for inference."
"Generate Python code that imports the necessary modules and uses Python-ASN1 to encode and decode ASN.1 data."
"Generate Python code that parses PartiQL queries and extracts their SQL equivalent using the pypariql library."
"Generate Python code that sends logs using the logging module, configuring log format, level, and file output."
"Generate Python code that creates an AWS Athena database, tables, and columns using the CDK Construct Library."
"Generate Python code that uses the ast module to parse source code and pretty prints the abstract syntax trees."
"Generate Python code that imports the JMP library and uses it to perform mixed precision computations with JAX."
"Generate Python code that imports the bleach library and creates a typing stub for it using the `typing` module."
"Generate Python code that imports the necessary modules and creates an API Gateway V2 integration using AWS CDK."
"Generate Python code that imports the Django module and creates a mock query set function in memory for testing."
"Generate Python code that uses ast module to parse a source file, find unused import statements, and remove them."
"Generate Python code that imports the PyAudio library and creates a typing stub for it using the `typing` module."
"Generate Python code that imports the necessary modules and creates a Netlink socket to interact with the kernel."
"Generate Python code that uses the requests module to sign AWS API requests using the SigV4 authentication method."
"Generate Python code that imports the os module and returns the current username using the os.getlogin() function."
"Generate Python code that imports the openpyxl library and creates a Workbook object to interact with Excel files."
"Generate Python code that imports the necessary modules and creates a basic window with a 3D scene, using Panda3D."
"Generate Python code that imports the blazingly fast DataFrame library and creates a new DataFrame from a CSV file."
"Generate Python code that imports the xmltodict library and uses it to convert an XML file into a pandas dataframe."
"Generate Python code that uses the Vega-Lite library to convert chart specifications into SVG, PNG, or Vega format."
"Generate Python code that uses the `subprocess` module to execute PowerShell scripts during a Colcon build process."
"Generate Python code that imports the Trie module and creates an empty trie object, ready to store key-value pairs."
"Generate Python code that imports the TensorFlow module and creates a simple neural network for image classification."
"Generate Python code that reads, parses, and converts Microsoft Outlook MSG e-mail files using the `pyobjus` library."
"Generate Python code that imports the TensorFlow module and creates a simple neural network for image classification."
"Generate Python code that parses dbt artifacts using the `dbt` library and returns a dictionary of artifact metadata."
"Generate Python code that parses, creates, and handles HL7 v2.x messages using a lightweight library, such as HL7apy."
"Generate Python code that imports the TensorFlow module and creates a simple neural network for image classification."
"Generate Python code that imports the logging module and creates a basic logger that logs messages at the INFO level."
"Generate Python code that imports the TensorFlow library and creates a simple neural network for image classification."
"Generate Python code that imports the `sys` module and uses its `exit()` function to exit the CLI application properly."
"Generate Python code that imports and utilizes the pandas library to efficiently manipulate and analyze large datasets."
"Generate Python code that imports the `perf_counter` module and creates a context manager that uses it to measure time."
"Generate Python code that imports the slugify module and creates a stub file with a slugified version of a given string."
"Generate Python code that uses the `json` module to write JSON data to a file, line by line, using the `write()` method."
"Generate Python code that imports the required modules and annotates the DirectConnect service using mypy-boto3-builder."
"Generate Python code that uses the `html.parser` module to parse an HTML file and convert its content into a JSON object."
"Generate Python code that uses the requests library to download a file from a URL, similar to the wget command-line tool."
"Generate Python code that uses the graphviz library to create a network diagram image from text input, similar to nwdiag."
"Generate Python code that uses the yearn-exporter library to extract historical on-chain price data from an archive node."
"Generate Python code that imports the necessary modules and creates a Datadog dashboard with Dagster framework components."
"Generate Python code that uses Doxygen, Sphinx, and reSTGen to automatically generate documentation for a C++ library API."
"Generate Python code that implements iterative proportional fitting with N dimensions using a library like NumPy or SciPy."
"Generate Python code that parses RDFa data from HTML pages and extracts triples, using the pyRdfa distiller/parser library."
"Generate Python code that uses the Mosaic library to perform geospatial analytics on a dataset stored in a Spark DataFrame."
"Generate Python code that imports the pathlib2 module and creates a typing stub for its functions, classes, and exceptions."
"Generate Python code that uses the `sphinx` library to toggle page content and collapse admonitions in Sphinx documentation."
"Generate Python code that imports the required modules and sets up type hints for the boto3 client using mypy-boto3-builder."
"Generate Python code that uses the `watchdog` library to monitor the services and execute a command when they are available."
"Generate Python code that creates a Streamlit component for building UI cards using the `st` module and basic HTML elements."
"Generate Python code that imports the psycopg2 library and creates a connection to a PostgreSQL database using a DSN string."
"Generate Python code that imports the required modules and annotates the FSx client with type hints using mypy-boto3-builder."
"Generate Python code that parses HTTP requests and responses using the `requests` library and BeautifulSoup for parsing HTML."
"Generate Python code that reformats multiline containers to ensure a consistent format, using a library like `black` or `yq`."
"Generate Python code that imports the `odf` library and creates a new OpenDocumentFormat file with a single paragraph of text."
"Generate Python code that uses the NLTK library to spell check text, suggesting corrections and highlighting misspelled words."
"Generate Python code that imports the necessary modules and uses pyfaidx to perform efficient random access to FASTA sequences."
"Generate Python code that implements a cipher based on AES256-CBC, using the cryptography library, to encrypt and decrypt data."
"Generate Python code that imports the `uuid` module and generates a short, unique identifier using the `uuid.uuid4()` function."
"Generate Python code that imports the re2 library and uses it to optimize regular expression matching for improved performance."
"Generate Python code that uses the `markdown` library to parse markdown tables and convert them into Pyspark/Pandas DataFrames."
"Generate Python code that creates a Discord bot using discord.py, which has an extension module to create reaction-based menus."
"Generate Python code that imports the websocket library and creates a connection to the Ypy server using the WebSocket protocol."
"Generate Python code that imports the requests library and creates a session object to interact with the BreakingPoint REST API."
"Generate Python code that imports the required libraries and creates a full-featured Telegram client using the Python 3 library."
"Generate Python code that uses the `django-nbdev` library to provide documentation lookup functionality in a Django application."
"Generate Python code that imports the json module and uses its dumps and loads functions to deflate and re-inflate dictionaries."
"Generate Python code that connects to a MariaDB database and performs CRUD operations using the mariadb-connector-python library."
"Generate Python code that uses the `devpi` library to perform upload, install, and other workflow commands for Python developers."
"Generate Python code that uses the built-in `inspect` module to get the name of a variable or attribute, similar to C#'s feature."
"Generate Python code that imports the random module and uses it to generate a list of random English words, then prints the list."
"Generate Python code that imports a secure, URL-friendly, unique string ID generator module and uses it to create a new unique ID."
"Generate Python code that imports the LDAP module and connects to an LDAP server using the given hostname, username, and password."
"Generate Python code that implements a pytest plugin using the trio library to provide asynchronous test support for Python tests."
"Generate Python code that processes video files by manipulating their duration, resolution, and bitrate using the MoviePy library."
"Generate Python code that imports the necessary modules and creates an NDB database connection to interact with the network stack."
"Generate Python code that imports the required modules and annotates the Glacier service with type hints using mypy-boto3-builder."
"Generate Python code that uses the MGRS library to convert geographic coordinates between MGRS, WGS84, and UTM coordinate systems."
"Generate Python code that reads and writes MRC files, a binary format for storing protein structure data, using the pymrc library."
"Generate Python code that imports the tidylib library and uses it to parse and clean up HTML code, supporting both Python 2 and 3."
"Generate Python code that uses the `subprocess` module to execute a system command, which will allow a language model to run code."
"Generate Python code that imports the Gurobi optimization library and solves a linear programming problem using the simplex method."
"Generate Python code that formats Markdown text into HTML, conforming to the CommonMark specification, using the `markdown` module."
"Generate Python code that creates a text progress bar for a command line interface, using a library such as `progressbar` or `tty`."
"Generate Python code that creates a thread-safe connection pool using the `threading` module and a queue to manage the connections."
"Generate Python code that uses the `os` and `shutil` modules to split a file into smaller pieces and then merge them back together."
"Generate Python code that implements a Unix cron-like scheduling system using a Python library such as `schedule` or `apscheduler`."
"Generate Python code that imports the necessary modules, sets up a development environment, and runs tests using pytest and flake8."
"Generate Python code that imports the typing module and creates a stub file for a characteristic with a given name and description."
"Generate Python code that sends telemetry data to a remote server using a common library, such as `telemetry` or `python-telemetry`."
"Generate Python code that imports and uses the Autocode standard library, providing Python bindings for the Autocode suite of tools."
"Generate Python code that imports the necessary modules and annotates the OpsWorks service with type hints using mypy-boto3-builder."
"Generate Python code that imports the required libraries and uses the Geopy library to read, write, and convert between CRS formats."
"Generate Python code that imports the necessary modules and sets up an environment variable to use Tencent Cloud Tiw SDK for Python."
"Generate Python code that imports the Maybe class from the pytoolkit library and uses it to implement null-aware operators in Python."
"Generate Python code that uses the `pydanny` library to create API documentation in Markdown format from Python modules and packages."
"Generate Python code that imports the OpenCL module and creates a context, queue, and memory objects to run a kernel on a GPU device."
"Generate Python code that imports the required modules and annotates the CloudTrail service with type hints using mypy-boto3-builder."
"Generate Python code that imports the IBM MQI extension library and connects to an IBM MQ queue manager to send and receive messages."
"Generate Python code that uses the Flask framework and WeasyPrint library to create and serve PDF documents within a web application."
"Generate Python code that uses the `libmagic` library to identify file types on a Debian Linux system, similar to the `file` command."
"Generate Python code that imports the necessary modules and defines a function to parse a C-like structure, using the Dissect module."
"Generate Python code that creates a fake database with snowflake-like data using a library such as Faker or Django model factory boy."
"Generate Python code that uses the influxdb module to parse an InfluxDB line protocol string and convert it into a Python dictionary."
"Generate Python code that imports the json module and creates an iterator that parses a JSON stream, yielding each parsed JSON object."
"Generate Python code that imports the sys module and prints the current Python version, such as \"Python 3.9.1\" or \"Python 2.7.18\"."
"Generate Python code that implements the Rijndael algorithm for encryption and decryption, using the cryptography library for Python3."
"Generate Python code that uses the `lxml` library to parse an XML file and complete the external type annotation for a given DTD file."
"Generate Python code that imports the necessary modules, creates an HDFS connection, and loads data from HDFS into a Pandas DataFrame."
"Generate Python code that imports the necessary libraries and uses the rosbag module to read, modify, convert, and write rosbag files."
"Generate Python code that imports the `request` module and returns the current request object, such as `request.get_current_request()`"
"Generate Python code that wraps Keras models and utilities into scikit-learn compatible APIs using the `sklearn.neural_network` module."
"Generate Python code that imports the SeleniumTestability library and uses it to improve the efficiency of asynchronous test execution."
"Generate Python code that imports the necessary libraries and uses the `requests` library to download Vega datasets for offline access."
"Generate Python code that embeds CPython in Java using the Jep library, allowing for seamless interaction between Python and Java code."
"Generate Python code that imports a small library to display a spinning cursor in the terminal while a lengthy task is being performed."
"Generate Python code that imports the Celery module and creates a basic Celery task that can be run using the celery command line tool."
"Generate Python code that imports the required modules and annotates the boto3 Health service with type hints using mypy-boto3-builder."
"Generate Python code that imports the necessary modules and annotates the CognitoSync service with type hints using mypy-boto3-builder."
"Generate Python code that imports the necessary modules and annotates the IoTSiteWise service with type hints using mypy-boto3-builder."
"Generate Python code that uses the LLVM library to format C, C++, and Objective-C code into a consistent style, similar to Clang-Format."
"Generate Python code that imports the Universal Analytics Python library and uses it to track events and user interactions on a website."
"Generate Python code that imports the pytest-print module and uses its printer fixture to print messages to the user during pytest runs."
"Generate Python code that imports the Robot Framework library and uses its logging functionality to write logs in the background thread."
"Generate Python code that imports the necessary libraries and creates a background mesh using the OpenGeode module from Geode-solutions."
"Generate Python code that uses the `latent_diffusion_models` library to synthesize high-resolution images using latent diffusion models."
"Generate Python code that uses the `geocoding` library to reverse geocode a given latitude and longitude, returning the nearest address."
"Generate Python code that imports the necessary modules and annotates the GlueDataBrew service with type hints using mypy-boto3-builder."
"Generate Python code that imports the necessary modules and sets up an environment variable to use the Tencent Cloud Tsf SDK for Python."
"Generate Python code that imports the icmplib library and uses it to send and receive ICMP echo requests (pings) to monitor IP addresses."
"Generate Python code that creates a database-backed asynchronous task queue using the `asyncq` library and a SQL database of your choice."
"Generate Python code that uses the PyPDF2 library to convert PDF files to DOCX format, using the Docxgen library to create the DOCX file."
"Generate Python code that imports the bios library and uses it to read and write data to a specified file, handling data types correctly."
"Generate Python code that uses the configuration module to read default values from a config file and passes them to colcon as arguments."
"Generate Python code that uses the OS library to convert coordinates between the UK Ordnance Survey National Grid and latitude/longitude."
"Generate Python code that implements connected component labeling on 2D and 3D images, supporting multiple labels, using the ITK library."
"Generate Python code that imports the necessary modules and annotates the Shield service client with type hints using mypy-boto3-builder."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.DeviceFarm service using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the types for the boto3 MediaStore service using mypy-boto3-builder."
"Generate Python code that imports the necessary modules and annotates the ForecastService class with type hints using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the IoTThingsGraph service with type hints using mypy-boto3-builder."
"Generate Python code that imports the necessary modules and annotates the EMRContainers service with type hints using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the IoTDeviceAdvisor class with type hints using mypy-boto3-builder."
"Generate Python code that imports the required modules and creates a PostgreSQL database connection using the C optimization distribution."
"Generate Python code that imports the necessary libraries and sets up authentication for using the Google Cloud Common API client library."
"Generate Python code that uses the `ast` module to parse a SQL query and return an abstract syntax tree (AST) representation of the query."
"Generate Python code that imports the csv module and uses its reader and writer objects to read from and write to CSV files, respectively."
"Generate Python code that imports the required modules and creates a PostgreSQL database connection using the C optimization distribution."
"Generate Python code that imports the cProfile module and uses it to decorate Django views, allowing for easy profiling of view functions."
"Generate Python code that imports the required modules and annotates the types for the IoT1ClickProjects service using mypy-boto3-builder."
"Generate Python code that imports the json module and uses it to encode and decode JSON data, similar to the canonical JSON package in Go."
"Generate Python code that imports the required modules and annotates the TimestreamQuery service with type hints using mypy-boto3-builder."
"Generate Python code that imports the TkinterDnD2 module and creates a drag-and-drop enabled widget using the tkDnD Tk extension version 2."
"Generate Python code that uses the Elasticsearch ECS Log handler to send log messages from the logging library to an Elasticsearch cluster."
"Generate Python code that imports the jmespath library and creates a typing stub for a JSON object using the `jmespath.compile()` function."
"Generate Python code that imports the backoff library and adds external type hints to its functions and classes, using the `typing` module."
"Generate Python code that imports the required modules and creates a prebuilt external provider for Terraform CDK (cdktf) using the module."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.DataExchange service using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the IoTJobsDataPlane service with type hints using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the MigrationHubConfig class with type hints using mypy-boto3-builder."
"Generate Python code that defines a library of utility classes and functions, including string manipulation, file I/O, and data structures."
"Generate Python code that uses the gzip module to read and write compressed data, and the mmap module for fast random access of gzip files."
"Generate Python code that uses the `requests` library to send HTTP requests to a given URL, and measures the response time and status code."
"Generate Python code that uses the Qiskit library to generate OpenQASM 3 and OpenPulse files for quantum circuits and pulses, respectively."
"Generate Python code that imports the necessary libraries and creates a NetCDF file using the H5Py library, similar to how netCDF4 operates."
"Generate Python code that parses TLS records using the `tlslib` library, which provides a simple API for parsing and generating TLS packets."
"Generate Python code that uses the `uuid` module to convert Flask route URLs to UUIDs, and vice versa, using a simple function or decorator."
"Generate Python code that uses the `scipy.stats` module to fit data to multiple distributions and retrieve the best-fitting distribution(s)."
"Generate Python code that imports the required modules and annotates the CloudSearchDomain service with type hints using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the boto3 QLDBSession service with type hints using mypy-boto3-builder."
"Generate Python code that creates a Docker container from a Python script using the `docker` module, similar to the `docker-python` package."
"Generate Python code that imports the required modules and annotates the boto3 AppRegistry service with type hints using mypy-boto3-builder."
"Generate Python code that resizes the right side of an image while maintaining its aspect ratio, using the `Image` class from Pillow library."
"Generate Python code that uses subprocess module to run a selected Python quality tool, such as pylint or flake8, on a Jupyter Notebook file."
"Generate Python code that imports the necessary modules, configures the VerticaHiveHook, and uses the hook to load data from Vertica to Hive."
"Generate Python code that uses the `ansible-vault` library to read and write YAML files, similar to the `ansible-playbook` command line tool."
"Generate Python code that uses the `requests` library to send a HTTP request to the AWS Lambda function, similar to how `curl` would be used."
"Generate Python code that imports the DNS library and performs DNS lookups for a list of domains, printing the IP addresses and domain names."
"Generate Python code that reads standard input on multiple platforms with a timeout using the `sys` module and the `stdin` buffering utility."
"Generate Python code that uses the yara library to parse YARA rules from a file or string input, and returns a list of matching rule objects."
"Generate Python code that imports the required modules and annotates the boto3 MediaPackage service with type hints using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the types for the boto3 Route53Domains service using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the types for the boto3 NetworkManager service using mypy-boto3-builder."
"Generate Python code that imports the required modules and annotates the ConnectParticipant service with type hints using mypy-boto3-builder."
"Generate Python code that imports the dateparser library and uses its functions to parse dates in various formats and return datetime objects."
"Generate Python code that imports the required libraries and creates a basic event-discrete, process-based simulation using the SimPy library."
"Generate Python code that creates a CLI tool using the datadog-check module to create, validate, and run custom checks for Datadog monitoring."
"Generate Python code that uses the `str` module's `capitalize()` method to restore capitalization for text, regardless of its original format."
"Generate Python code that imports the necessary modules and annotates the Rekognition service client with type hints using mypy-boto3-builder."
"Generate Python code that applies a function to each row of a pandas DataFrame in parallel across multiple CPU cores using the joblib library."
"Generate Python code that imports the json module and creates a dictionary containing dynamic JSON structures using the json.dumps() function."
"Generate Python code that imports the necessary modules and creates an AWS provider for Terraform CDK (cdktf) using the prebuilt AWS provider."
"Generate Python code that imports the necessary modules and annotates the boto3.AuditManager service with type hints using mypy-boto3-builder."
"Generate Python code that creates a basic PyPI server using the `http.server` module, allowing users to install packages via pip/easy_install."
"Generate Python code that imports the necessary modules and creates a QuantLib.Lib instance for accessing financial analytics and calculations."
"Generate Python code that uses the `subprocess` module to run a command on a given path, similar to the `run` function in the `pathlib` module."
"Generate Python code that uses the ldap3 library to connect to an LDAP server, retrieve user information, and update password for a given user."
"Generate Python code that uses the `pickle` module with built-in compression libraries like `zlib` or `lzma` to serialize and deserialize data."
"Generate Python code that uses the dnslib library to parse an SPF record and extract IP addresses from it, then returns a list of IP addresses."
"Generate Python code that imports the necessary modules and annotates the boto3 ServiceCatalog client with type hints using mypy-boto3-builder."
"Generate Python code that imports the `backports_abc` module and creates typing stubs for its functions and classes, using the `typing` module."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.ServiceDiscovery service using mypy-boto3-builder."
"Generate Python code that reads JSON lines (jl) files and recovers broken files using the jsonlines library and custom logic for file recovery."
"Generate Python code that imports the required modules and annotates the AppIntegrationsService class with type hints using mypy-boto3-builder."
"Generate Python code that imports the `filelock` module and creates a stub file with a lock acquisition and release mechanism for demo purposes."
"Generate Python code that imports the Teradata Python module, connects to a Teradata database, executes a SQL script, and retrieves the results."
"Generate Python code that imports the necessary modules, sets up authentication with Sumo Logic, and searches for logs using the Sumo Logic API."
"Generate Python code that imports the version checking library and checks if a given version is compatible with the installed version of Python."
"Generate Python code that creates a typing stubs module for Polib, allowing developers to use static type checking when working with Polib data."
"Generate Python code that imports the pydata.pandas library and uses it to perform data manipulation and analysis tasks within a Django project."
"Generate Python code that imports the `attrs` library and creates a typing stub for a class with attributes defined using the `attrs` decorator."
"Generate Python code that imports the necessary modules and creates a Docker provider for Terraform CDK (cdktf) using the prebuilt Docker image."
"Generate Python code that imports the kubectl and helm modules, sets up an AWS Lambda function, and deploys a Kubernetes application using Helm."
"Generate Python code that uses the ruamel.yaml library to parse YAML templates, allowing for the use of Python expressions within the templates."
"Generate Python code that uses the `subprocess` module to run a Colcon simulation and generates a Z shell script based on the simulation output."
"Generate Python code that imports the required modules and creates a custom transport adapter class with a fixed IP address for SSL connections."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.KinesisVideoMedia service using mypy-boto3-builder."
"Generate Python code that compares two RPM packages version using a pure Python implementation, without using any external libraries or modules."
"Generate Python code that imports the necessary libraries and uses a library like rtfmin to compress and decompress Rich Text Format (RTF) files."
"Generate Python code that creates a dictionary-like cache module that stores data in files, allowing for efficient caching and retrieval of data."
"Generate Python code that creates a Pulumi package for creating TLS resources in Pulumi programs, using the `pulumi` module and the `tls` module."
"Generate Python code that imports the necessary libraries and creates a modal window with a title, header, and body text using the Modal library."
"Generate Python code that creates a clear Graphviz graph using the `graphviz` library, allowing for manual editing of the graph after generation."
"Generate Python code that imports and uses the `monads` module to provide data structures and utilities for monadic style functional programming."
"Generate Python code that imports the OpenSlide library and creates an instance of the slide class, allowing you to interact with digital slides."
"Generate Python code that imports the required modules and annotates the IoT1ClickDevicesService client with type hints using mypy-boto3-builder."
"Generate Python code that imports the TeX Gyre Cursor typeface using the `font_file` module and sets the font for a given Text widget in Tkinter."
"Generate Python code that imports the Rust persistent Data Structures (RPDS) library and creates a persistent vector using the `rds::Vector` type."
"Generate Python code that implements a JSON schema validator using the `jsonschema` library, with support for object-oriented paths in the schema."
"Generate Python code that imports the pandas library, creates a dataframe from a CSV file, and uses SQL syntax to query the data in the dataframe."
"Generate Python code that uses Pydantic to define a data model for metrics and leverages the Mongolab library to store them in a MongoDB database."
"Generate Python code that uses the requests library to perform HTTPS CredSSP authentication, providing a username and password for authentication."
"Generate Python code that imports the necessary modules, creates a JACK client instance, and sets up a callback function to handle message events."
"Generate Python code that imports the required modules and annotates the ResourceGroupsTaggingAPI client with type hints using mypy-boto3-builder."
"Generate Python code that uses the `setuptools` module to read the metadata from the `setup.py` file and creates a `package.yaml` file for Colcon."
"Generate Python code that uses the `cdxj` library to index WARC and ARC files and creates a searchable index for searching and analyzing web data."
"Generate Python code that uses the `rpm` module to read RPM archive files and extract information such as package name, version, and dependencies."
"Generate Python code that uses the os module to add an environment variable to the system path, allowing pkg-config files to be located by colcon."
"Generate Python code that imports the required modules and annotates the boto3.GlobalAccelerator service with type hints using mypy-boto3-builder."
"Generate Python code that imports the pytest module and uses it to create a plugin that simplifies calling Ansible modules from tests or fixtures."
"Generate Python code that imports the necessary modules and presents a unified interface for all supported transforms using FFTW, the FFT library."
"Generate Python code that creates a WebAssembly runtime using Wasmtime, allowing for the execution of WebAssembly modules in a Python environment."
"Generate Python code that imports the shlex module and uses it to split command line strings into words, handling Unicode correctly in Python 2.X."
"Generate Python code that uses the os and shutil modules to read .env files and set environment variables, similar to how the poetry plugin works."
"Generate Python code that imports the wcscmp module and uses its wcswidth function to calculate the width of a wide-character string in a terminal."
"Generate Python code that imports the unittest.mock module and creates argument matchers for mocking functions, methods, and objects in unit tests."
"Generate Python code that imports the pytest module and uses it to run tests, while also generating a coverage report using the fork of pytest-cov."
"Generate Python code that creates a strongly typed, zero-effort CLI interface for a given application using the argparse library and typing module."
"Generate Python code that uses the `datetime` module to transform timestamps using a simple domain-specific language (DSL) defined in the question."
"Generate Python code that imports the necessary libraries and interfaces with the CQC tket library to perform quantum computations and simulations."
"Generate Python code that imports the requests library and makes an HTTP request to an OVHcloud API, using the provided API key for authentication."
"Generate Python code that uses the `tar` and `gzip` modules to create a Lambda layer for compressing and decompressing files using tar, gz, and 7z."
"Generate Python code that implements low-level computer vision functions, such as image processing and feature detection, using the OpenCV library."
"Generate Python code that imports the required modules and annotates the boto3.MarketplaceCatalog service with type hints using mypy-boto3-builder."
"Generate Python code that imports the hashlib module and creates a SHA-256 hash object to produce a fixed-size hash value for a given input string."
"Generate Python code that encodes OpenTelemetry traces and metrics into Protobuf format using the OpenTelemetry-Python library and protobuf library."
"Generate Python code that imports the necessary modules and annotates the types for an AWS Lambda function using aiobotocore and mypy-boto3-builder."
"Generate Python code that imports the necessary modules and annotates the types of the AWS RDS 2.9.0 service client using mypy-boto3-builder 7.21.0."
"Generate Python code that uses the `csscompress` library to compress CSS files and remove unnecessary characters, similar to the YUI CSS Compressor."
"Generate Python code that imports the necessary modules and creates a dictionary object that stores word translations in a format similar to UniDic."
"Generate Python code that imports the necessary modules and creates a function that can serialize and deserialize Python dataclasses using Databind."
"Generate Python code that creates a simple server using the socket library and handles incoming connections, reading and writing data to the socket."
"Generate Python code that imports the necessary libraries and uses them to convert case with permissive input, following the cross-library approach."
"Generate Python code that imports the requests library and sends a GET request to the Cybrid Bank API to retrieve a list of available bank accounts."
"Generate Python code that imports and sets up connections to multiple databases using SQLAlchemy, Django ORM, or another database library of choice."
"Generate Python code that imports the necessary libraries and creates an interactive 3D visualization of a volume using the IPython widgets library."
"Generate Python code that imports the RocksDB Cython wrapper module and creates a RocksDB database object to interact with a local RocksDB instance."
"Generate Python code that imports the required modules and creates a typing stub for PyJWT, allowing for the convenient creation of JSON Web Tokens."
"Generate Python code that parses a BibTeX file and returns a dictionary containing the bibliographic data for each entry, using the `bibtex` module."
"Generate Python code that removes decorators from Python functions, methods, or classes using the `inspect` module and the `isdecorated()` function."
"Generate Python code that imports the subprocess module and uses its check_output function to run a shell command, capturing its output as a string."
"Generate Python code that implements a YAML parser which supports includes and Python expressions, using the `yaml` module and the `PyYAML` library."
"Generate Python code that defines an SQS queue and sets up a tweet stream from a search using the Tweepy library and the AWS SDK for Python (Boto3)."
"Generate Python code that imports the necessary modules, sets up authentication and configures the client for accessing Tencent Cloud BaaS services."
"Generate Python code that imports a module and uses its functions to perform base62 encoding and decoding, similar to the `base62` package in Python."
"Generate Python code that uses the ANTLR library to parse SQL statements and extract information such as column names, table names, and SQL keywords."
"Generate Python code that imports the json and xmltodict modules, and uses them to serialize and deserialize Python objects to and from JSON and XML."
"Generate Python code that uses the lcov module to parse LCOV coverage data and convert it to Cobertura XML format for further analysis and reporting."
"Generate Python code that uses regular expressions, blacklists, and SMTP verification to validate email addresses using the `email_validator` module."
"Generate Python code that imports the necessary modules and annotates the types of the boto3 ApplicationAutoScaling service using mypy-boto3-builder."
"Generate Python code that sends notifications to a Slack channel with supporting attachments and fields using the Slack API and python-slack library."
"Generate Python code that imports the necessary modules and annotates the types of the boto3 ApiGatewayManagementApi client using mypy-boto3-builder."
"Generate Python code that creates an abstract syntax tree (AST) for Python code, using the `ast` module, with a focus on consistency and ease of use."
"Generate Python code that imports the necessary modules and creates a Datadog provider for Terraform CDK (cdktf) using the prebuilt Datadog provider."
"Generate Python code that implements a flake8 plugin to manage type-checking imports and forward references, using the `flake8` and `typing` modules."
"Generate Python code that imports the necessary modules for working with Cassandra databases using the Aliyun Python SDK, specifically the cs module."
"Generate Python code that uses the OpenCV library to read an image and extract text from it using OCR, then prints the extracted text to the console."
"Generate Python code that sends a request to a URL using the httpx library:\n```\nimport httpx\n\nresponse = httpx.get('https://www.example.com')\n```"
"Generate Python code that imports the required libraries, sets up a GraphQL client, and sends a query to a GraphQL server using the `graphql` library."
"Generate Python code that uses OpenCV library to remove the background of an image using the chroma keying technique, like in the package description."
"Generate Python code that uses the `yacc` module to parse and analyze source code, similar to the functionality provided by the `sly` package in Rust."
"Generate Python code that imports the CVSS2/3 library and creates an interactive calculator for calculating CVSS scores in both Python 2 and Python 3."
"Generate Python code that imports the necessary AWS CDK modules and creates a cross-region global Aurora RDS database using the CDK construct library."
"Generate Python code that calculates the area inside of any GeoJSON geometry using the `geopy` library, which provides geometric operations in Python."
"Generate Python code that uses the Cython language to create a wrapper around a C++11 module, allowing seamless operability between the two languages."
"Generate Python code that creates a zip file from input files and streams using the `zipfile` module and the `BytesIO` module for stream manipulation."
"Generate Python code that imports the necessary modules and annotates the TranscribeService class from boto3 with type hints using mypy-boto3-builder."
"Generate Python code that imports the necessary modules and annotates the boto3 EC2 instance connect service with type hints using mypy-boto3-builder."
"Generate Python code that creates a multiprocessing-based AWS Kinesis producer and consumer library using the `multiprocessing` and `boto3` libraries."
"Generate Python code that imports the necessary modules, creates a connection to a RedisGraph database, and performs basic CRUD operations on a graph."
"Generate Python code that wraps the C++ Boost Histogram library, providing an easy-to-use interface for creating and manipulating histograms in Python."
"Generate Python code that imports the required libraries and performs geohash encoding, decoding, and associated functions using the `geohash` library."
"Generate Python code that uses the `cffi` module to create typing stubs for a C library, allowing for type-safe interaction with the library in Python."
"Generate Python code that uses the hashlib and zlib modules to create a module and command-line tool for computing file and directory checksums/hashes."
"Generate Python code that imports the necessary modules and creates an Azure AD provider for Terraform CDK (cdktf) using the prebuilt azuread provider."
"Generate Python code that imports the necessary libraries, sets up the interface for using TabPFN and its library, and trains TabPFN using the library."
"Generate Python code that creates a temporary directory using the `tempfile` module's `mkdtemp()` function, then returns the path to the new directory."
"Generate Python code that uses the ONNX library to load an ONNX file, converts it to NHWC format, and then saves it as a TensorFlow/TFLite/Keras model."
"Generate Python code that implements a faster C implementation of bitstruct, a library for efficient bit-level operations on fixed-size blocks of bits."
"Generate Python code that imports the necessary modules, sets up a Celery configuration, and uses pytest-celery to run Celery tasks within pytest tests."
"Generate Python code that imports the necessary modules for RPA automation, such as `os`, `sys`, `time`, `datetime`, `re`, `subprocess`, and `paramiko`."
"Generate Python code that imports the Apache DataSketches Library and creates a Sketch object to estimate the frequency of unique elements in a dataset."
"Generate Python code that uses the `avro` library to validate data against an Avro schema, raising a `ValueError` if the data does not match the schema."
"Generate Python code that imports the logging module and creates a custom logger class with a low-boilerplate logging function for library method calls."
"Generate Python code that creates a simple caching library that stores data in memory and disk, with an interface to set, get, and delete cache entries."
"Generate Python code that implements a Singleton pattern with type hints for the methods, like `typing.Singleton` but without using the `typing` module."
"Generate Python code that uses the `xml.etree.ElementTree` module to parse XML files or text and converts them into JSON format using the `json` module."
"Generate Python code that imports the Google Cloud Pub/Sub client library and creates a client object to interact with the Google Cloud Pub/Sub service."
"Generate Python code that uses the `yaml` module to read and write YAML files, and implements a custom resolver to enable self-referential YAML entries."
"Generate Python code that imports the necessary libraries and sets up a connection to Scale AI's data platform using the Scale AI Python client library."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.KinesisVideoArchivedMedia service using mypy-boto3-builder."
"Generate Python code that uses the `milvus` library to perform efficient similarity search and clustering on dense vector representations of embeddings."
"Generate Python code that imports the necessary libraries and creates a plot on the terminal using the plotly library, similar to the `plotext` package."
"Generate Python code that creates an FTP client and server using the asyncio library, allowing for asynchronous file transfers over a secure connection."
"Generate Python code that creates pretty tables in the terminal using the `terminaltables` library, import it, and create a table with headers and data."
"Generate Python code that imports the C-Blosc2 library and provides a Python interface for compressing and decompressing data using the Blosc2 algorithm."
"Generate Python code that imports the required modules and parses a given Git URL, supporting both parsing and rewriting, using the `giturlparse` module."
"Generate Python code that imports the necessary modules from the Qt Essentials package to create a basic window with a label, button, and layout manager."
"Generate Python code that imports the `future` module and its various submodules, such as `future.standard_library`, to provide Python 2/3 compatibility."
"Generate Python code that uses the `types` module to define type stubs for Celery and its related packages, such as `celery.Task` and `kombu.Connection`."
"Generate Python code that imports the os and shutil modules, creates classes File and Dir, and defines methods for interacting with file system entities."
"Generate Python code that compiles LESS files into CSS files using the lesscss library, allowing for efficient and organized styling of web applications."
"Generate Python code that uses the htmlmin library to minify HTML files, optionally taking in a list of ignored CSS selectors and a list of ignored tags."
"Generate Python code that uses the `vaex` library to create and display interactive data visualizations in Jupyter Notebook and Jupyter Lab environments."
"Generate Python code that uses the `os` module to add an environment variable to the system path, allowing Colcon to find libraries in a custom location."
"Generate Python code that imports the necessary modules for a tools package, including modules for file manipulation, string manipulation, and debugging."
"Generate Python code that uses the BeautifulSoup library to parse an HTML file and extract the plain text content, ignoring all HTML tags and formatting."
"Generate Python code that uses cryptography library to decrypt files and strings using various encryption algorithms such as AES, RSA, and Caesar Cipher."
"Generate Python code that uses the Livy library to execute Apache Spark jobs and interact with the Spark cluster programmatically, similar to SparkMagic."
"Generate Python code that imports the pandoc library and uses it to convert a file from one format to another, such as converting a Markdown file to HTML."
"Generate Python code that uses the `dockerfile` module to parse a Dockerfile and extract its high-level representation, similar to the official Go parser."
"Generate Python code that imports the django_pglocks module and creates a context manager for acquiring and releasing advisory locks on PostgreSQL tables."
"Generate Python code that uses the `subprocess` module to execute shell commands and create tasks and subflows in Prefect to interact with those commands."
"Generate Python code that creates an HTML file with a JavaScript component that has an ActionScript 3-like interface, using apysc as the frontend library."
"Generate Python code that runs and analyzes benchmarks using the `benchmark` module, which provides a simple way to define and run performance benchmarks."
"Generate Python code that uses the `typing` module to create type stubs for Babel, allowing for more accurate type checking and improved code readability."
"Generate Python code that uses the num2words module to convert long numbers into a human-readable format, such as \"1 billion\" instead of \"1000000000\"."
"Generate Python code that imports the flake8 library and creates a Flake8 instance with the name \"FlakeHeaven\" to perform syntax checks on Python files."
"Generate Python code that imports H2O's machine learning library and Spark, then creates an H2O cluster and uses it to train a model on a Spark DataFrame."
"Generate Python code that imports the requests library and uses it to make HTTP requests to the Podman RESTful API to interact with containers and images."
"Generate Python code that imports the necessary libraries, loads the data, and runs the benchmark test for performance analysis using the `timeit` module."
"Generate Python code that uses the pywinauto library to interact with the Android UiAutomator test tool and perform automated UI tests on Android devices."
"Generate Python code that creates an AWS CDK serverless cluster from a snapshot using the AWS CDK library's `aws_rds.ServerlessClusterFromSnapshot` class."
"Generate Python code that imports the necessary modules from the CURAND library to execute a GPU-accelerated linear algebra computation on NVIDIA hardware."
"Generate Python code that imports the multiprocessing module and creates a Queue object to implement a message queue for exchanging data between processes."
"Generate Python code that imports the sip module and uses it to create a PyQt6 application with the same functionality as the original package description."
"Generate Python code that imports the required modules, creates a new Excel file, defines the sheet names, enters data into the sheets, and saves the file."
"Generate Python code that uses the ` nose` testing framework and the `random` module to randomly order tests and control the random seed for each test run."
"Generate Python code that implements an interpretable model, such as a decision tree or linear regression, using a library like scikit-learn or TensorFlow."
"Generate Python code that creates an OpenGL context, sets up a basic scene, and accelerates the rendering of dynamic 3D content using the PyOpenGL library."
"Generate Python code that imports the necessary modules and defines a class with methods to interact with DBus, using asyncio to handle asynchronous calls."
"Generate Python code that uses the scapy library to create and send ICMP packets, allowing you to perform tasks such as forgery, pinging, and tracerouting."
"Generate Python code that implements Borsh serialization using the Construct library, allowing for efficient and compact representation of data structures."
"Generate Python code that uses the `git` and `markdown` modules to read the modification date of a Markdown file and set it as the revision date in MkDocs."
"Generate Python code that uses the subprocess module to execute Bash scripts, similar to the way colcon does, but without the need for an external package."
"Generate Python code that imports the required libraries and creates an IP set using the ipset module, allowing for efficient manipulation of IP addresses."
"Generate Python code that uses the sqlparse library to parse a given SQL query into a JSON parse tree, similar to how the ast module works for Python code."
"Generate Python code that imports the necessary modules, sets up the command line interface, and uses ANSI escape codes to color the output of the program."
"Generate Python code that creates an AWS AppSync API using the CDK Construct Library, including a schema definition, resolvers, and a GraphQL API endpoint."
"Generate Python code that creates a progress bar with real-time throughput, ETA, and animations using the `progress` library and custom animation functions."
"Generate Python code that parses and generates FPGA Assembly (FASM) code, using a library such as `pyparsing` for parsing and `codegen` for code generation."
"Generate Python code that uses the `mlflow` library to deploy machine learning models to IBM Watson Machine Learning (WML) for model serving and management."
"Generate Python code that uses the `requests` library to download the latest OpenJDK version from Adoptium, Corretto, or Zulu and install it on your system."
"Generate Python code that extracts metadata from MOOC videos, such as duration, resolution, and format, using the pafy library to interact with YouTube API."
"Generate Python code that parses and elaborates a SystemRDL 2.0 file, using the PySystemRDL library, to produce a dictionary representation of the RDL data."
"Generate Python code that imports the uuid module, generates a random UUID, and returns a URL-friendly version of the UUID using the uuid.url_safe() method."
"Generate Python code that imports the necessary libraries and uses the ncnn library to perform high-performance neural network inference on a mobile device."
"Generate Python code that imports the nltk library, uses the sentiment module to analyze the given string, and returns a dictionary with the profanity level."
"Generate Python code that imports the `uuid` module and creates a universally unique lexicographically sortable identifier using the `uuid.uuid4()` function."
"Generate Python code that imports the necessary modules and creates a simple typing stub for the popular Python library \"tqdm\" using the \"typing\" module."
"Generate Python code that imports the required modules, creates subclasses for each of the O365 APIs, and defines additional utility methods for convenience."
"Generate Python code that uses the `docstring` module to convert Python docstrings to Markdown format on the fly, without modifying the original source code."
"Generate Python code that uses the `cmake` module to format and lint CMakeLists.txt files in a project directory, echoing errors and warnings to the console."
"Generate Python code that imports the rtf module, reads an RTF file, converts it to plain text using the rtf.RTFParser class, and saves the result to a file."
"Generate Python code that imports the websocket library and creates a client connection to a server, allowing for bidirectional communication over WebSocket."
"Generate Python code that imports the necessary modules and creates a Pulumi program to create, update, and delete Kubernetes resources using the Pulumi API."
"Generate Python code that implements feature flagging and A/B testing for an application using a library like `scikit-feature-flag` or `pytest-feature-flag`."
"Generate Python code that uses the Minidump library to read minidumps left behind by crashed processes and prints the stack trace information to the console."
"Generate Python code that imports the necessary modules and sets up an Aliyun STS client to access temporary security credentials for Alibaba Cloud services."
"Generate Python code that creates a dictionary and uses both the built-in `hash()` function and the `sha256` library to calculate the hash of the dictionary."
"Generate Python code that imports a module only when its symbols are actually used, allowing for efficient use of system resources and reducing memory usage."
"Generate Python code that implements a twisted plugin for pytest, allowing users to run tests over a network using Twisted's asynchronous networking library."
"Generate Python code that imports the TensorFlow library and loads a pre-trained model using the `tf.keras.applications` module, such as `resnet50` or `bert`."
"Generate Python code that imports the necessary libraries and uses the ISA-L library to provide faster zlib and gzip compatible compression and decompression."
"Generate Python code that imports the necessary libraries, defines a dataset and model, and trains a vector quantizer using PyTorch's `torch.nn.Module` class."
"Generate Python code that uses the python-docx library to convert an HTML file to a DOCX file, preserving the layout and styles of the original HTML document."
"Generate Python code that uses the `subprocess` module to download and install pre-built LLVM packages for various operating systems using the `curl` command."
"Generate Python code that defines a package with a separate module for the implementation and a public API surface, using the `package` and `module` keywords."
"Generate Python code that imports and uses the PySNMP library to access and manipulate the IETF & IANA MIBs, which are compiled into the code for ease of use."
"Generate Python code that imports the json module and uses it to parse a JSON file into a dictionary or creates a dictionary and converts it to a JSON string."
"Generate Python code that uses the `text_maze` library to create a text-based maze game similar to LabMaze, allowing users to generate and solve custom mazes."
"Generate Python code that creates a cross-platform game engine with a clean API, fast rendering, and support for both Python 2 and 3 using the Pygame library."
"Generate Python code that uses the ANTLR4 library to run the ANTLR4 tool and grammar interpreter/profiler, such as `antlr4 -gui` or `antlr4 -o <output_file>`."
"Generate Python code that imports the necessary modules and uses the CDK8s framework to create Kubernetes manifests compatible with Kubernetes version 1.24.0."
"Generate Python code that uses the DVC library to render a scene from a DVC file, applying any necessary transformations and materials to create a final image."
"Generate Python code that uses the `openpyxl` library to read and parse Excel files, and the `ast` library to compile formula expressions into executable code."
"Generate Python code that reads and writes PDF files, extracts text and layout, creates new PDF documents, and modifies existing ones using the PyPDF2 library."
"Generate Python code that parses HAR files and extracts valuable information such as HTTP requests, responses, and performance metrics using the `har` library."
"Generate Python code that uses the `xml.etree.ElementTree` module to parse an XML file, modify its contents, and write the updated XML data back to a new file."
"Generate Python code that uses the lib2to3 library to parse Python source code and produce docspec data, similar to the functionality of the `pydanny` package."
"Generate Python code that creates a temporary directory and files within it, and then deletes them when they are no longer needed, using the `tempfile` module."
"Generate Python code that uses the PyPDF2 library to extract text from a PDF file and outputs it as plain text, maintaining the original layout and formatting."
"Generate Python code that imports the Pulp 3 API library and uses it to manage software repositories, packages, and dependencies for various operating systems."
"Generate Python code that imports the necessary modules, sets up a caching system using pylibmc, and stores data in a memcached server for efficient retrieval."
"Generate Python code that implements a simple GraphQL server using the `graphql-python` library, including a schema definition, resolvers, and a query handler."
"Generate Python code that compiles a finite-state grammar into a deterministic finite automaton, using the nltk library to tokenize and parse the input string."
"Generate Python code that writes a JSON file with floating-point numbers formatted with specified precision using the `json` module and the `round()` function."
"Generate Python code that implements an Apache Spark adapter plugin for dbt using the `pyspark` library, allowing users to execute dbt models on Spark clusters."
"Generate Python code that instruments AWS Lambda functions with OpenTelemetry tracing and metrics using the OpenTelemetry-Python library and the AWS Lambda API."
"Generate Python code that uses the `speech_recognition` library to transcribe audio files and calculates word error rate (WER) using the `editdistance` library."
"Generate Python code that imports the necessary modules for creating a Qt application with a user interface, including the QtCore, QtGui, and QtWidgets modules."
"Generate Python code that parses microformats data from HTML pages using the `BeautifulSoup` library and returns extracted information in a standardized format."
"Generate Python code that imports the necessary modules, creates a customizable colored logger, and logs messages at different levels with corresponding colors."
"Generate Python code that tests Django schema and data migrations, including ordering, using the `django.contrib.auth` app's models and the `migrations` module."
"Generate Python code that implements a CANopen stack using the canopy library, including support for CANopen communication, device discovery, and configuration."
"Generate Python code that imports the os module and uses its methods to read and write properties files, similar to how Java's Properties class is used in Java."
"Generate Python code that implements a secure cookie and session interface for WSGI applications by using a library such as `securesession` or `cookie-session`."
"Generate Python code that creates a composable command line interface toolkit using the `click` library and the `asyncio` module for asynchronous functionality."
"Generate Python code that fuzzily matches two pandas DataFrames based on one or more common fields using the `fuzzywuzzy` library and the `pandas.merge` method."
"Generate Python code that implements a simple JavaScript interpreter using the `ast` module to parse JavaScript code and execute it using the `exec()` function."
"Generate Python code that parses and writes SubRip (.srt) subtitles using the `subrip` library, which provides an easy-to-use API for working with SubRip files."
"Generate Python code that imports the necessary modules and creates a SQLAlchemy engine object that uses the Vertica dialect and connects to a Vertica database."
"Generate Python code that uses the `deb` module to create a `.deb` package file from a source directory, and includes dependencies and metadata for the package."
"Generate Python code that uses the Matplotlib library to display images and videos in an IPython notebook, and uses the Pillow library to read and write images."
"Generate Python code that uses the osxapp and dark mode modules to detect if an operating system is in dark mode, similar to the \"Detect OS Dark Mode\" package."
"Generate Python code that imports the maxminddb library and creates a typing stub for it, allowing you to use static type checking with your IDE or type checker."
"Generate Python code that uses the Librosa library to perform Short-time Fourier Transform (STFT) on audio signals, shifting their pitch and timbre in real-time."
"Generate Python code that imports the required libraries and creates an asynchronous and synchronous API wrapper for waifu.pics using ayncio and request modules."
"Generate Python code that uses the `pytest` framework to create TestRail runs and add test results, leveraging the `testrail` library to interface with TestRail."
"Generate Python code that implements JSON Schema, JSON Pointer, and JSON Reference using the `json schema` library and the `jsonpointer` and `jsonref` libraries."
"Generate Python code that imports the necessary libraries for MEG and EEG data analysis, including numpy, scipy, and matplotlib, and loads the MNE-Python module."
"Generate Python code that imports the pycurl module and creates a typestub for it, allowing for more efficient and type-safe usage of the cURL library in Python."
"Generate Python code that uses the `gettext` module to translate strings in a web application, allowing for easy localization and support for multiple languages."
"Generate Python code that imports the requests library and creates a session object to send HTTP requests with customizable headers, authentication, and cookies."
"Generate Python code that uses the ONNX Runtime library to optimize transformer models for inference on various hardware platforms, including CPU, GPU, and FPGA."
"Generate Python code that implements WebRTC and ORTC functionality using the PyWebRTC library, allowing for real-time communication between browsers and devices."
"Generate Python code that imports the necessary modules, creates a custom enumeration class with defined methods, and uses the enum objects in a sample function."
"Generate Python code that imports the faker library and uses its \"phone_number\" function to generate a phone number in E164 format, like \"+1 (800) 123-4567\"."
"Generate Python code that uses the `timeit` module to measure the execution time of a given function or piece of code, and prints the results in a simple format."
"Generate Python code that imports the `uuid` module and creates a new time-based UUID format suitable for use as a database key, such as `uuid.time_based_uuid()`"
"Generate Python code that imports the datetime module and creates a class called DateTime with methods for parsing, formatting, and manipulating dates and times."
"Generate Python code that creates a proxy server using the `http.server` module, which tunnels requests between remote servers based on regular expression rules."
"Generate Python code that imports the Pulp 3 API client library and uses it to manage software repositories, packages, and updates for various operating systems."
"Generate Python code that parses and evaluates tag expressions for cucumber/behave scenarios using a dedicated library like 'cucumber-expressions' or 'pydantic'."
"Generate Python code that uses the whois library to retrieve WHOIS information for a given domain name, and print the resulting data in a neatly formatted table."
"Generate Python code that uses the `unittest` module to write unit tests for your program, and utilizes the `nose` framework to run and debug the tests with ease."
"Generate Python code that sets up a full-featured VPN over an SSH tunnel using the paramiko library to establish the SSH connection and OpenVPN to manage the VPN."
"Generate Python code that uses the `re` module to search for and replace placeholders in broken Robot Framework output files, then writes the fixed files to disk."
"Generate Python code that imports the necessary modules and creates an AWS Synthetic workspace, including a Canvas and a DSL processor, using the AWS CDK library."
"Generate Python code that uses the PyPDF2 library to read a PDF file and convert each page into a separate PNG image, saving them in a specified output directory."
"Generate Python code that uses the cChardet library to detect the character encoding of a given string, using the `chardetect` function from the `chardet` module."
"Generate Python code that imports the requests library, formats data as JSON-LD, and makes HTTP POST requests to the Google Search Console API to submit sitemaps."
"Generate Python code that implements an HTTP request adapter for the `httpx` library, using the `Kiota` framework to handle authentication and API key management."
"Generate Python code that creates an AWS Elastic Container Service cluster using the CDK Construct Library, specifying the necessary resources and configurations."
"Generate Python code that imports the requests library and uses its built-in authentication mechanisms, such as basic auth or OAuth, to authenticate API requests."
"Generate Python code that creates a simulated traffic scenario using the Snappi Open Traffic Generator library, including vehicles, pedestrians, and road network."
"Generate Python code that uses the wkhtmltopdf library to convert HTML files to PDF documents, allowing for customization of the PDF layout and style through CSS."
"Generate Python code that imports the `validator` module and uses its functions to validate various types of data with custom error messages and validation rules."
"Generate Python code that imports the necessary modules and creates an instance of the KVStore class, allowing you to interact with the specified key-value store."
"Generate Python code that imports the required modules, sets up the Bootstrap 5 framework in a Django project, and customizes it according to the project's needs."
"Generate Python code that implements an async SSH/SFTP backend for fsspec using the Paramiko library, allowing for asynchronous file access and transfer over SSH."
"Generate Python code that imports the pyfilesystem library and integrates it with Django, allowing for easy file storage and retrieval within Django applications."
"Generate Python code that creates a Bokeh plotting backend for Pandas, GeoPandas, and PySpark using the Bokeh library and its integration with Pandas and PySpark."
"Generate Python code that uses the Google Cloud Client Library to interact with the Google Earth Engine API, creating batch assets and managing them using addons."
"Generate Python code that uses the rich display library to format click help output in a nice and visually appealing way, with proper indentation and colorization."
"Generate Python code that uses the `requests` and `os` modules to download and save Python packages from the PyPI repository, similar to the `pip` package manager."
"Generate Python code that parses a string representation table, such as a CSV or JSON file, into a dictionary or Pandas DataFrame using the `csv` or `json` module."
"Generate Python code that imports the Stripe library and creates a typing stub for a Stripe customer object, including properties such as name, email, and address."
"Generate Python code that imports the necessary modules from vtk and provides an easier-to-use interface for working with vtk datasets, meshes, and visualizations."
"Generate Python code that sends an email using the built-in smtplib library, allowing the user to specify the recipient's email address, subject, and message body."
"Generate Python code that creates an interactive grid for sorting and filtering DataFrames in Jupyter Notebook using the ipywidgets library and the pandas library."
"Generate Python code that uses SWIG to wrap a C/C++ library and expose its functions to Python, allowing seamless integration and usage from within Python scripts."
"Generate Python code that imports the necessary modules and uses the dbasis library to read and write dBase, FoxPro, and Visual FoxPro .dbf files, including memos."
"Generate Python code that creates a 2D physics engine using the Box2D library, allowing for simulation of rigid bodies, joints, and collisions in a 2D environment."
