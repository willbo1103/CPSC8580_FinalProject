"Generate Python code that imports the required modules and annotates the types for the boto3 DocDB 1.34.13 service using mypy-boto3-builder 7.23.0, like this:\n```python\nfrom typing import List, Dict\nfrom boto3.docdb import DocDBClient, CreateDatabaseRequest, DescribeDatabasesResponse, DeleteDatabaseRequest\n\n# type hints for boto3 DocDB methods\ndef create_database(client: DocDBClient) -> None:\n   client.create_database(CreateDatabaseRequest({'database_name': 'my_database'}))\n\ndef describe_databases(client: DocDBClient) -> List[Dict]:\n   response = client.describe_databases()\n   return list(response.get(' databases', []))\n\ndef delete_database(client: DocDBClient, database_name: str) -> None:\n   client.delete_database(DeleteDatabaseRequest({'database_name': database_name}))\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.QuickSight service using mypy-boto3-builder, like this:\n```python\nfrom typing import TypeVar, Generic\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import BotocorePlugin\n\nclass QuickSight(BaseClient):\n   def __init__(self, config: dict) -> None:\n       self.config = config\n\n   def create_dataset(self, name: str, data: bytes) -> dict:\n       return self.invoke(\"create_dataset\", name=name, data=data)\n\n   def update_dataset(self, dataset_id: str, data: bytes) -> dict:\n       return self.invoke(\"update_dataset\", dataset_id=dataset_id, data=data)\n\n   def delete_dataset(self, dataset_id: str) -> None:\n       return self.invoke(\"delete_dataset\", dataset_id=dataset_id)\n\n   def list_datasets(self) -> List[dict]:\n       return self.list_objects"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.Honeycode 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import TypeVar, Generic\nfrom botocore.client import BaseClient\nfrom honeycode import Honeycode\n\nclass MyHoneycodeClient(BaseClient):\n   def __init__(self, config: dict) -> None:\n       self.config = config\n\n   def create_database(self, database_name: str) -> None:\n       return self._create_database(database_name)\n\n   def list_databases(self) -> List[dict]:\n       return self._list_databases()\n\n   def update_database(self, database_name: str, new_name: str) -> None:\n       return self._update_database(database_name, new_name)\n\ndef main() -> None:\n   client = MyHoneycodeClient({\"region\": \"us-west-2\"})\n   client.create_database(\"mydatabase"
"Generate Python code that imports the boto3 library and adds type hints for the PI 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List, Dict\nfrom boto3 import client\n\n# Service clients with typed methods\nclient = client('pi', version='1.34')\n\n# Typed resource definitions\nclass MyResource(object):\n   def __init__(self, name: str, description: str) -> None:\n       self.name = name\n       self.description = description\n\n# Typed method calls\ndef create_resource(client: Client, name: str, description: str) -> MyResource:\n   return client.create_resource(name, description)\n\ndef list_resources(client: Client) -> List[MyResource]:\n   return client.list_resources()\n\ndef delete_resource(client: Client, name: str) -> None:\n   return client.delete_resource(name)\n```"
"Generate Python code that wraps a WSGI application in an AWS Lambda handler function for running on API Gateway or an ALB:\n```\nimport lambda_function\nfrom wsgiref import Handler\n\napp = lambda_function.Function()\n\ndef handle_request(environ, start_response):\n   request = Request(environ)\n   response = app(request.GET, start_response)\n   return response\n\nif __name__ == '__main__':\n   lambda_function.run(handle_request)\n```\nThis code defines a WSGI application using the `wsgiref` module and then wraps it in an AWS Lambda handler function using the `lambda_function` module. The `handle_request` function is called with the environment and start response objects, and it calls the WSGI application's `GET` method to process the request. Finally, the `lambda_function.run()` line runs the Lambda function."
"Generate Python code that imports the necessary modules and annotates the parameters and return types of the boto3.QLDB 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import TypeVar, Callable\nfrom botocore.client import BaseClient\nfrom boto3.qldb import QLDBClient\n\nclass MyQldbClient(QLDBClient):\n   def __init__(self, *args: Any, **kwargs: Any) -> None:\n       super().__init__(*args, **kwargs)\n\n   @staticmethod\n   def get_paginator(operation_name: str) -> Callable[[Any], Any]:\n       return QLDBClient.get_paginator(operation_name)\n\n   def create_database(self, database_name: str) -> None:\n       return self.client.create_database(database_name)\n\n   def delete_database(self, database_name: str) -> None:\n       return self.client.delete_database(database_name)\n\n   def list"
"Generate Python code that creates a VPC, subnet, and security group using the Aliyun Python SDK:\n```\nfrom aliyunsdk import AcsResponse, Client, Types\n\n# Initialize the client\nclient = Client(access_key='your_access_key', secret_key='your_secret_key')\n\n# Create a VPC\nvpc_response = client.do_request('CreateVpc', {\n   'vpcName': 'my-vpc',\n   'cidrBlock': '10.0.0.0/16'\n})\n\n# Print the ID of the created VPC\nprint(vpc_response.acs_response.data['vpc']['vpcId'])\n\n# Create a subnet\nsubnet_response = client.do_request('CreateSubnet', {\n   'vpcId': vpc_response.acs_response.data['vpc']['vpcId'],\n   'subnetName': 'my-subnet',\n   'cidrBlock': '10.0.1.0/24'\n})\n\n# Print the ID of the created"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 Pinpoint 1.34.0 service client using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import TypeVar\nfrom mypy_boto3_builder import Botofunction, BotoService\n\n# Define the type variables for the service client\nT_client = TypeVar('T_client', bound='Boto3Client')\nT_service = TypeVar('T_service', bound='Pinpoint')\n\n# Define the Botofunction and BotoService classes with type hints\nclass MyPinpoint(Botofunction):\n   client: T_client\n   service: T_service\n\n   def __init__(self, client: T_client) -> None:\n       self.client = client\n       self.service = client.pinpoint\n\n   def get_campaigns(self, **kwargs: Any) -> List[dict]:\n       return self.service.get_campaigns(**kwargs)\n\n   def create_campaign(self, **kwargs: Any"
"Generate Python code that marshals dataclasses to/from JSON using the `dataclasses` and `json` modules, with field properties having initial values, and construct a dataclass schema with JSON input:\n```python\nimport dataclasses\nimport json\n\n@dataclasses.dataclass\nclass MyDataclass:\n   field1: str = ''\n   field2: int = 0\n   field3: bool = False\n\ndata = json.loads('{\"field1\": \"hello\", \"field2\": 42, \"field3\": true}')\nobj = MyDataclass(**data)\nprint(obj.field1) # prints \"hello\"\nprint(obj.field2) # prints 42\nprint(obj.field3) # prints True\n\n# Construct a dataclass schema with JSON input\ndata = json.loads('{\"field1\": {\"type\": \"string\"}, \"field2\": {\"type\": \"integer\"}, \"field3\": {\"type\": \"boolean\"}}')\nschema = dataclasses.Schema(MyDataclass, data)\nprint(schema) # prints the dataclass schema with the specified fields and types\n```"
"Generate Python code that imports the necessary modules, creates a Boto3 Cognito client, and uses it to log in users with SRP support, for example:\n```\nfrom botocore.client import BotocoreClient\nfrom cognitoidentityserviceprovider import CognitoIdentityServiceProvider\n\n# Initialize the Cognito client\ncognito_client = CognitoIdentityServiceProvider(\n   client=BotocoreClient(),\n   region=\"your-region\"\n)\n\n# Log in a user using SRP\nuser_pool = cognito_client.get_user_pool(PoolId=\"your-pool-id\")\nuser_data = {\n   \"username\": \"your-username\",\n   \"password\": \"your-password\"\n}\nresponse = user_pool.initiate_auth(\n   AuthRequest={\n       \"ClientId\": \"your-client-id\",\n       \"ClientSecret\": \"your-client-secret\",\n       \"RedirectUri\": \"your-redirect-uri\",\n       \"AuthFlow\": \"USER_PASSWORD_AUTH\",\n       \"AuthParameters\": {\n           \"USERNAME\": user_"
"Generate Python code that imports the necessary modules and annotates the boto3.Synthetics 1.34.0 service with type hints using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import Boto3Client\nfrom boto3.synthetics import Synthetics as SyntheticsClient\n\nsynthetics_client = Boto3Client(\n   client_config=dict(\n       service='synthetics',\n       region='us-west-2',\n       credentials=None\n   )\n)\n\n@synthetics_client.operation\nasync def create_canary(name: str, description: str, tags: List[dict]) -> dict:\n   return await synthetics_client.create_canary(name, description, tags)\n\n@synthetics_client.operation\nasync def list_canaries() -> List[dict]:\n   return await synthetics_client.list_canaries()\n\n@synthetics_client.operation\nasync def describe"
"Generate Python code that implements a QUIC and HTTP/3 server using the `quic` library, listening on a port and serving HTTP/3 requests.\n\nHere is an example of Python code that could implement a QUIC and HTTP/3 server using the `quic` library:\n```\nimport quic\n\n# Create a QUIC listener\nlistener = quic.QuicListener(('localhost', 8080))\n\n# Define a callback function for incoming connections\ndef handle_connection(connection):\n   # Accept the connection and create a QUIC stream\n   stream = connection.accept()\n   \n   # Read data from the stream\n   data = stream.read()\n   \n   # Print the received data\n   print(f\"Received data: {data}\")\n   \n   # Write data back to the client\n   stream.write(\"Hello, client!\")\n   \n   # Close the stream and connection\n   stream.close()\n   connection.close()\n\n# Start listening for incoming connections\nlistener.start(handle_connection)\n```\nThis code creates a QUIC listener on port 8080 and"
"Generate Python code that imports the SQLAlchemy module and creates a connection to a DuckDB database using the SQLAlchemy driver.\n\nHere is an example of how this could be done:\n```\nfrom sqlalchemy import create_engine\n\n# Create a connection to a DuckDB database\nengine = create_engine('duckdb://user:password@localhost/database')\n```\nThis will create a connection to a DuckDB database using the `duckdb` URL scheme, which is specific to the DuckDB database system. The `create_engine` function returns a `Engine` object, which can then be used to execute queries against the database."
"Generate Python code that imports the necessary libraries and annotates the types of the boto3 IoT Analytics 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import TypeVar, Callable\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import Botofailure, MyBoto3\nimport boto3\n\n# Define type aliases\ntype Boto3Client = Callable[[str], BaseClient]\ntype IoTAnalytics = MyBoto3[Boto3Client]\n\n# Annotate the IoTAnalytics class\nclass IoTAnalytics(MyBoto3):\n   def __init__(self, config: dict) -> None:\n       super().__init__(config)\n       self.client: Boto3Client = boto3.client(\"iotanalytics\", config=config)\n\n   # Add type hints for methods and properties\n   def create_dataset(self, dataset_name: str, dataset_definition: dict) -> None:\n       self.client.create_dataset("
"Generate Python code that imports the necessary modules and annotates the types of the IoTWireless 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Tuple\nfrom botocore.client import BaseClient\nfrom boto3. exceptions import Boto3Error\nfrom mypy_boto3_builder.generators.iotwireless import IoTWirelessGenerator\n\n# Initialize the client\nclient = IoTWirelessGenerator(BaseClient).generate()\n\n# Define the types of the IoTWireless service\nclass IoTWirelessService:\n   def __init__(self, client: BaseClient) -> None:\n       self.client = client\n\n   def list_things(self) -> List[Tuple[str, str]]:\n       return self.client.list_things()\n\n   def create_thing(self, thing_name: str, thing_type: str) -> str:\n       return self.client.create_thing(thing_name, thing_type)\n\n   def update_thing(self, thing"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.CloudSearch 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\nann = TypeAnnotator( CloudSearchClient )\n```\nThis code imports the `typing` module, which provides type hints for Python functions and variables, and the `botocore.client` module, which is used by boto3 to interact with AWS services. It also imports the `mypy_boto3_builder` module, which contains the `TypeAnnotator` class that will be used to generate type annotations for the boto3 client. Finally, it creates an instance of the `TypeAnnotator` class and passes it the `CloudSearchClient` class from boto3, which will be used to generate type annotations for the methods and properties of the `CloudSearchClient` class."
"Generate Python code that uses the BigQuery client library to send data to BigQuery from a CSV file, like so:\n```\nimport csv\nfrom google.cloud import bigquery\n\n# Create a client object\nclient = bigquery.Client()\n\n# Specify the dataset and table where the data will be written\ndataset_name = \"my-dataset\"\ntable_name = \"my-table\"\n\n# Load the CSV file\nwith open(\"data.csv\", \"r\") as f:\n   reader = csv.reader(f)\n   rows = list(reader)\n\n# Insert the data into BigQuery\nerrors = client.insert_rows(table_name, rows)\n\n# Print any errors that occurred during insertion\nprint(errors)\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.Redshift 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import TypeVar, Type Alias\nfrom mypy_boto3_builder import botofill\n\n@botofill\nclass Redshift:\n   def __init__(self, *, client: \"Boto3Client\" = None, config: dict = None) -> None:\n       self.client: Boto3Client = client\n       self.config: dict = config\n\n   @property\n   def client(self) -> Boto3Client:\n       return self._client\n\n   @client.setter\n   def client(self, value: Boto3Client) -> None:\n       self._client = value\n\n   @property\n   def config(self) -> dict:\n       return self._config\n\n   @config.setter\n   def config(self, value: dict) -> None:\n       self._config = value\n\n   def create_cluster(\n         "
"Generate Python code that imports the required modules and annotates the inputs and outputs of the `boto3.CostExplorer` service using type hints, like so:\n```python\nfrom typing import Optional\nfrom boto3 import ServiceClient\nfrom boto3.cost_explorer import CostExplorer\n\n# Annotate the service client\nclient: ServiceClient = None\n\n# Annotate the CostExplorer object\nce: CostExplorer = None\n\n# Set up the client and CostExplorer objects\ndef setup(session: boto3.Session):\n   global client, ce\n   client = session.client('costexplorer')\n   ce = CostExplorer(client)\n\n# Define a function to get cost data\n@annotator.with_docstring\ndef get_cost_data(\n       *,\n       start_time: datetime,\n       end_time: datetime,\n       filters: dict,\n       granularity: str,\n       **kwargs: Any\n) -> List[dict]:\n   \"\"\"\n   Get cost data from AWS Cost Explorer.\n\n   Args:\n       start_time: Start time of the"
"Generate Python code that uses the `json` module to load data from a JSON file and converts it into typed data structures using the `typing` module, like so:\n```\nimport json\nfrom typing import TypedDict\n\ndata = json.load(open('data.json'))\ntypede_data = TypedDict(data)\n```\nThis will create a `TypedDict` object called `typede_data` that represents the data in the JSON file `data.json`. The keys of the dictionary are enforced to match the structure of the JSON data, and the values are converted to the appropriate types based on their annotations in the `TypedDict` definition."
"Generate Python code that imports the necessary modules and annotates the types of the boto3 CodeStar 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import MyPyBoto3Builder\n\nbuilder = MyPyBoto3Builder(service=\"codestar\", version=\"1.34.0\")\nclient = builder.build_client(\"CodeStar\")\n\n# Annotate the client object with its type\nclient: CodeStarClient = client\n\n# Annotate the list of projects returned by the client's `list_projects` method\nprojects: List[Project] = client.list_projects()\n\n# Annotate the project object returned by the client's `describe_project` method\nproject: Project = client.describe_project(project_id=\"my-project-id\")\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.CloudHSM 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import TypeVar, Generic\nfrom botocore.client import BaseClient\nfrom boto3.cloud_hsm import CloudHSM\n\nclass MyCloudHSM(BaseClient):\n   def __init__(self) -> None:\n       super().__init__()\n       self.client = CloudHSM(config=None)\n\n   def create_key(self, name: str, description: str) -> dict:\n       return self.client.create_key(name, description)\n\n   def list_keys(self) -> List[dict]:\n       return self.client.list_keys()\n\n   def get_key(self, key_id: str) -> dict:\n       return self.client.get_key(key_id)\n\n   def update_key(self, key_id: str, new_description: str) -> dict:\n       return"
"Generate Python code that imports the necessary modules and annotates the types for the boto3 WorkMail service version 1.34.0 using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom boto3.workmail import WorkMailClient\n\nwork_mail_client = WorkMailClient(\n   aws_access_key_id='your_access_key',\n   aws_secret_access_key='your_secret_key',\n   region='your_region'\n)\n\n# Annotated methods and properties of the WorkMail client\nwork_mail_client.list_mailboxes() -> List[dict]\nwork_mail_client.list_mailboxes(NextToken='next_token') -> List[dict]\nwork_mail_client.create_mailbox(MailboxName='new_mailbox') -> dict\nwork_mail_client.delete_mailbox(MailboxName='existing_mailbox') -> None\nwork_mail_client.list_mails() -> List[dict"
"Generate Python code that imports the required modules and annotates the types for the boto3.Route53 service version 1.34.16 using mypy-boto3-builder version 7.23.1, like this:\n```python\nfrom typing import TypeVar, Generic\nfrom botocore.client import BaseClient\nfrom botocore.types import ServiceMetadata\nfrom boto3.route53 import Route53Client\n\nclass Route53ClientTypeAnnotated(Route53Client):\n   @typevar('self')\n   def __init__(self) -> None:\n       self.client: BaseClient = None\n       self.metadata: ServiceMetadata = None\n\n   def create_health_check(self, RequestAttributes arg1: dict) -> None:\n       pass\n\n   def delete_health_check(self, HealthCheckId arg1: str) -> None:\n       pass\n\n   def get_health_check(self, HealthCheckId arg1: str) -> None:\n       pass\n\n   def list_health_checks(self, MaxResults arg1:"
"Generate Python code that imports the necessary modules and annotates the types for the MarketplaceCommerceAnalytics service, version 1.34.0, using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import BotocoreClientBuilder\n\n# Annotate the client class\nclass MarketplaceCommerceAnalytics(BaseClient):\n   def __init__(self, *args, **kwargs) -> None:\n       super().__init__(*args, **kwargs)\n\n   # Annotate methods and properties\n   @property\n   def availability(self) -> str:\n       return \"AVAILABLE\"\n\n   def cancel_data_export(self, export_id: str) -> None:\n       pass\n\n   def create_data_export(self, data_export_request: dict) -> None:\n       pass\n\n   def delete_data_export(self, export_id: str) -> None:\n       pass\n\n   def get_data_export"
"Generate Python code that imports the required modules and annotates the LookoutforVision service using mypy-boto3-builder:\n```python\nfrom typing import Optional\nimport boto3\nfrom mypy_boto3_builder import TypeAnnotator\n\n# Initialize the type annotator\nta = TypeAnnotator(boto3)\n\n# Define the service class with typed methods\nclass LookoutforVision(boto3.service):\n   def __init__(self, config: dict):\n       self.config = config\n\n   def create_dataset(self, dataset_name: str, dataset_type: str, data_source: str, kms_key_arn: str, **kwargs: Any) -> None:\n       r\"\"\"Create a new dataset.\"\"\"\n       pass\n\n   def list_datasets(self, **kwargs: Any) -> List[dict]:\n       r\"\"\"List all datasets.\"\"\"\n       pass\n\n   def describe_dataset(self, dataset_name: str, **kwargs: Any) -> dict:\n       r\"\"\"Describe a dataset.\"\"\"\n       pass\n\n   def"
"Generate Python code that imports the required modules and annotates the CloudFormation 2.9.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom aiobotocore.cloudformation import CloudFormation\nfrom aiobotocore.client import AIOBotoCoreClient\n\nasync def main():\n   client = AIOBotoCoreClient(\n       aws_access_key_id='YOUR_AWS_ACCESS_KEY',\n       aws_secret_access_key='YOUR_AWS_SECRET_KEY',\n       aws_session_token='YOUR_AWS_SESSION_TOKEN',\n   )\n   cloudformation = CloudFormation(client)\n   stacks = await cloudformation.list_stacks()\n   print(stacks)\n```"
"Generate Python code that creates a Django REST framework JSON renderer backed by Orjson:\n```python\nfrom rest_framework import renderers\nfrom django.contrib.json import orjson\n\nclass OrjsonRenderer(renderers.JSONRenderer):\n   def render(self, data, media_type, serializer):\n       return orjson.dumps(data)\n```\nThis code defines a custom JSON renderer for Django REST framework that uses the `orjson` library to serialize Python objects into JSON format. The renderer takes in the data to be serialized, the requested media type, and the serializer instance, and returns a JSON-formatted string using the `orjson.dumps()` function."
"Generate Python code that imports the required modules and annotates the types of the boto3 Elastic Beanstalk client using mypy-boto3-builder, like this:\n```python\nfrom typing import Callable\nfrom botocore.client import BaseClient\nfrom elasticbeanstalk import ElasticBeanstalk\n\neb_client = ElasticBeanstalk(\n   aws_access_key_id=\"string\",\n   aws_secret_access_key=\"string\",\n   region=\"string\"\n)\n\n# Annotate methods and properties of the ElasticBeanstalk client\neb_client.describe_environment(\"env-name\") -> None\neb_client.create_environment(\"env-name\", \"env-type\") -> None\neb_client.delete_environment(\"env-name\") -> None\neb_client.list_environments() -> List[dict]\neb_client.list_environment_resources(\"env-name\") -> List[dict]\n```"
"Generate Python code that imports the required modules and sets up type hints for the boto3.Braket 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Tuple\nfrom botocore.client import Boto3Client\nfrom braket.braket_service import BraKetService\n\nbraket_client: Boto3Client = None  # type: ignore\nbraket_service: BraKetService = None  # type: ignore\n\ndef init_braket_client(region: str) -> None:\n   global braket_client\n   braket_client = Boto3Client(\n       service=BraKetService,\n       region=region,\n       config=None  # type: ignore\n   )\n\ndef init_braket_service() -> None:\n   global braket_service\n   braket_service = BraKetService(\n       client=braket_client,\n       region=braket_client.region  # type: ignore\n   )\n```"
"Generate Python code that implements a Ray backend for distributed LightGBM:\n```python\nfrom ray import init, get, put\nfrom lightgbm import LightGBMClassifier, LightGBMRegressor\n\n# Initialize Ray\ninit(num_cpus=4)\n\n# Define a function to create a LightGBM model\ndef create_model(data):\n   return LightGBMClassifier(objective='multiclass', num_class=8, max_depth=5, learning_rate=0.05)\n\n# Distribute data across four nodes\ndata = np.random.rand(1000, 10)\ndata_per_node = data.split(np.array_split(data, 4))\n\n# Train a separate LightGBM model on each node\nmodels = [create_model(data_per_node[i]) for i in range(4)]\n\n# Use Ray to parallelize training of models\nresults = [get(models[i].fit(data_per_node[i], epochs=10)) for i in range(4)]\n\n# Combine results from each"
"Generate Python code that imports the required libraries and sets up type hints for the boto3.Detective service version 1.34.0 using mypy-boto3-builder version 7.21.0, like so:\n```python\nfrom typing import Tuple\nfrom botocore.client import BaseClient\nfrom boto3.detective import Detective\n\nbase_client: BaseClient = None\ndetective: Detective = None\n\ndef init_clients(region: str) -> Tuple[BaseClient, Detective]:\n   base_client = boto3.client('detective', region=region)\n   detective = boto3.client('detective', region=region, config=None)\n   return base_client, detective\n\ndef get_case_status(case_id: str) -> str:\n   base_client, detective = init_clients(region='us-west-2')\n   response = detective.describe_cases(CaseIds=[case_id])\n   case_status = response['Cases'][0]['Status']"
"Generate Python code that uses the `asn1crypto` library to parse, encode, and decode ASN.1 data, similar to the following package description:\n```\nASN.1 is a powerful and flexible data modeling language used in various industries for defining hierarchical, typed data structures. This package provides an implementation of an ASN.1 parser, encoder, and decoder in Python. It allows you to define your data structures using ASN.1 syntax, and then use the generated Python code to manipulate and exchange data with other systems that support ASN.1.\n```\nHere's a possible prompt:\n\n\"Generate Python code that parses, encodes, and decodes ASN.1 data using the `asn1crypto` library, allowing users to define their own data structures using ASN.1 syntax and interact with other systems that support ASN.1.\""
"Generate Python code that imports the necessary modules and annotates the types for the boto3 MediaLive 1.34.6 service using mypy-boto3-builder 7.23.0, like so:\n```python\nfrom typing import Callable, Dict, List, Optional, Tuple\nfrom boto3 import ServiceResource\nfrom boto3.media_live import MediaLiveClient\n\ndef create_media_live_client(config: dict) -> MediaLiveClient:\n   return MediaLiveClient(config=config)\n\ndef list_streams(\n   client: MediaLiveClient,\n   *,\n   next_token: str = None,\n   max_results: int = None,\n) -> Tuple[List[dict], str]:\n   return client.list_streams(next_token=next_token, max_results=max_results)\n\ndef create_stream(\n   client: MediaLiveClient,\n   *,\n   name: str,\n   input_device: str,\n   output_device: str,\n   bitrate: int,\n   resolution: tuple,\n   frame"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.Greengrass 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List, Dict\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import BotohubBuilder\n\n# Build the Greengrass client with type hints\ngg_client = BotohubBuilder(base_client=BaseClient).build_greengrass()\n\n# Define the type of the Greengrass client\ngg_client: GreengrassV2 = gg_client\n\n# Use the client to perform Greengrass operations\nresponse = gg_client.deploy_resources(\n   DeploymentName='my-deployment',\n   ResourceDefinitionVersion='v1.0',\n   Resources={\n       'resource1': {\n           'ResourceType': ' AWS::EC2::Instance',\n           'Properties': {\n               'InstanceType': 't2.micro'\n           }\n       },\n       'resource2': {\n           'ResourceType"
"Generate Python code that imports the required modules and annotates the types for the MediaConnect service in boto3 version 1.34.7 using mypy-boto3-builder version 7.23.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom boto3.services.mediaconnect import MediaConnect\n\n# Annotate the client and service classes\nclass MyMediaConnectClient(BaseClient):\n   def __init__(self, config: dict) -> None:\n       super().__init__(config=config)\n       self.service = MediaConnect(self)\n\n   def create_flow(self, flow_name: str, *, description: str = None, avails: List[str] = None) -> None:\n       \"\"\"Create a new flow.\"\"\"\n       return self.service.create_flow(flow_name, description=description, avails=avails)\n\n   def delete_flow(self, flow_arn: str) -> None:\n       \"\"\"Delete a flow.\"\"\"\n       return self.service.delete_flow(flow_arn)\n"
"Generate Python code that renders a view as a string and inserts it into a template, using Django's render_partial tag, like so:\n```\nfrom django import template\nfrom django.template import loader\nfrom django.http import HttpResponse\n\ndef my_view(request):\n   # Render the view as a string\n   output = ''\n   if request.method == 'POST':\n       # Do something based on the POST data\n       output += 'Hello, World!'\n   else:\n       output += 'Hello, World!'\n   return HttpResponse(output)\n\n# Register the view as a Django template tag\ndef render_partial(context, name, *args, **kwargs):\n   t = loader.get_template(name)\n   context.update({'content': t.render(context, *args, **kwargs)})\n   return HttpResponse(t.render(context, *args, **kwargs))\n\n# Use the tag in a template\n{% load render_partial %}\n\n<div>{{ content }}</div>\n\n# Render the template\nt = loader.get_template('my_template.html')\noutput"
"Generate Python code that uses the Cloudflare API to start a tunnel from a Flask app, using the `requests` library to make HTTP requests to the Cloudflare API and the `Flask` framework to run the app:\n```\nimport requests\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n   # Start the Cloudflare tunnel\n   response = requests.post(\"https://api.cloudflare.com/client/v4/tunnels\", json={\"title\": \"My Tunnel\"})\n   if response.status_code == 201:\n       print(\"Tunnel started successfully\")\n   else:\n       print(\"Error starting tunnel:\", response.text)\n   return \"Hello World!\"\n\nif __name__ == \"__main__\":\n   app.run(debug=True)\n```\nThis code creates a Flask app that starts a tunnel using the Cloudflare API when the `/` route is accessed. The `requests` library is used to send a POST request to the Cloudflare API to create the tunnel, and the response is checked for errors."
"Generate Python code that imports the Scylla driver for Apache Cassandra and creates a connection to a Cassandra cluster.\n\nHere is an example of a package description for the Scylla driver for Apache Cassandra:\n\n\"The Scylla driver for Apache Cassandra is a library that allows you to connect to a Cassandra cluster from your Python applications. With this driver, you can execute CQL queries, create and manage tables, and perform other database operations. The driver supports both synchronous and asynchronous execution, allowing you to choose the programming model that best fits your use case.\"\n\nHere is a possible prompt that could generate Python code to accomplish the same tasks as the Scylla driver for Apache Cassandra:\n\n\"Write a Python program that uses the Scylla driver for Apache Cassandra to connect to a Cassandra cluster, create a table, insert data into the table, and retrieve the data back out.\"\n\nHere is some sample Python code that could accomplish these tasks:\n```\nimport scylla\n\n# Connect to a Cassandra cluster\ncluster = scylla.Cluster('localhost:9042')\n\n# Create a table\ntable = cluster.create_table('"
"Generate Python code that creates a namespace in Azure Data Services using the `azure-data-services` library, specifying the namespace name and optional metadata description; then, create a table within the namespace using the `DataTable` class from the same library, defining the column names and data types, and finally, insert some sample data into the table."
"Generate Python code that imports the required modules and sets up type annotations for the boto3 GameLift 1.34.1 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import TypeVar, Callable\nfrom botocore.client import BaseClient\nfrom boto3.game_lift import GameLiftClient\nfrom mypy_boto3_builder.generators.game_lift import GameLiftTypedClient\n\n# Set up type annotations for the GameLift client\nclient: GameLiftClient = GameLiftTypedClient(client=BaseClient)\n```"
"Generate Python code that imports the necessary libraries and uses TableLogger to log tabular data into a console or file, similar to how it's described in the package description.\n\nHere's an example of what the generated code might look like:\n```\nimport tablelogger\n\n# Create a logger\nlogger = tablelogger.TableLogger()\n\n# Log some sample data\ndata = [(\"Name\", \"Age\", \"Gender\"),\n       (\"Alice\", 25, \"Female\"),\n       (\"Bob\", 30, \"Male\")]\nlogger.log(data)\n\n# Log the data to a file\nwith open(\"data.txt\", \"w\") as f:\n   logger.log_to_file(f, data)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.Comprehend 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BotocoreClient\nfrom boto3.comprehend import ComprehendClient\nfrom boto3.comprehend.model import (\n   DocumentClassificationRequest,\n   DocumentClassificationResponse,\n   EntitiesDetectionRequest,\n   EntitiesDetectionResponse,\n   KeyPhrasesDetectionRequest,\n   KeyPhrasesDetectionResponse,\n   SentimentDetectionRequest,\n   SentimentDetectionResponse,\n)\n\n# Initialize the client\ncomprehend_client = ComprehendClient(\n   aws_access_key_id='YOUR_AWS_ACCESS_KEY',\n   aws_secret_access_key='YOUR_AWS_SECRET_KEY',\n   region='YOUR_AWS_REGION'\n)\n"
"Generate Python code that imports the required modules and annotates the types for the MediaStoreData service in boto3 version 1.34.0 using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import List, Union\nfrom boto3.client import Boto3Client\nfrom boto3.media_store import MediaStoreData\n\n# Define type annotations for MediaStoreData service\nclass MediaStoreData(Boto3Client):\n   def list_objects(self, Bucket: str, Prefix: str = None, Marker: str = None, MaxKeys: int = None) -> List[Union[dict, MediaStoreData]]:\n       return self.get_object_metadata(Bucket, Prefix, Marker, MaxKeys)\n\n   def get_object_metadata(self, Bucket: str, Prefix: str = None, Marker: str = None, MaxKeys: int = None) -> dict:\n       return self.head_object(Bucket, Prefix, Marker)\n\n   def head_object(self, Bucket: str"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.SageMaker 1.34.13 service using mypy-boto3-builder 7.23.0, like this:\n```python\nfrom typing import TypeVar, Type Alias\nfrom botocore.client import BaseClient\nfrom sagemaker import SageMaker\n\nSMClient = TypeVar('SMClient', bound=BaseClient)\n\nclass SageMakerClient(SageMaker):\n   def __init__(self, *args, **kwargs):\n       super().__init__(**kwargs)\n       self.config = kwargs['config']\n       self.sagemaker_runtime = kwargs['sagemaker_runtime']\n\n   def create_training_job(self, *args, **kwargs):\n       return super().create_training_job(*args, **kwargs)\n\n   def create_deployment(self, *args, **kwargs):\n       return super().create_deployment(*args, **kwargs)\n\n   def delete_model(self, *args, **kwargs):\n       return"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 CloudFront client, version 1.34.0, using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import TypeVar\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import BotoflowTypes\n\nCF_Client = TypeVar('CF_Client', bound='botocore.client.BaseClient')\n\nclass CloudFront(BaseClient):\n   def __init__(self, *args, **kwargs) -> None:\n       super().__init__(*args, **kwargs)\n       self.types = BotoflowTypes(self)\n\n   def list_distributions(self, *args, **kwargs) -> List['Distribution']:\n       return self.types.list_distributions(self, *args, **kwargs)\n\n   def create_distribution(self, *args, **kwargs) -> 'Distribution':\n       return self.types.create_distribution(self, *args, **kwargs)\n\n   # ... add other methods"
"Generate Python code that creates a pytest plugin that limits the output to only the necessary information by using the `pytest` and `limat` modules, like so:\n```\nimport pytest\nfrom limat import Limat\n\ndef my_plugin(limit):\n   lim = Limat(limit)\n   def my_fixture(func):\n       def wrapper(*args, **kwargs):\n           return func(*args, **kwargs)\n       return wrapper\n   return my_fixture\n\n@pytest.fixture\ndef my_limiter(request):\n   return my_plugin(request.config.getoption('--limit'))\n\n@pytest.mark.parametrize('my_input', [1, 2, 3])\ndef test_my_function(my_limiter, my_input):\n   # Your test function here\n```\nThis code defines a pytest plugin called `my_plugin`, which takes a limit parameter and uses it to create a `Limat` instance. The `my_fixture` function is then defined inside the plugin, which wraps the test function in a `wrapper` function that limits the output"
"Generate Python code that defines a module with core functionalities for data type definition, data I/O, and frequently used functions, including a `data_types` dictionary for defining custom data types, a `read_csv()` function for reading CSV files, a `write_csv()` function for writing CSV files, and a `mean()` function for calculating the mean of a list."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.IdentityStore 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import BotocoreClientBuilder\n\nidentity_store_client = BotocoreClientBuilder(\n   client_name=' IdentityStore',\n   client_module_path='boto3.client',\n   service=boto3.IdentityStore,\n   version='1.34.0',\n).build()\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.Mobile 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom boto3.mobile import MobileClient\n\n# Annotate the types for the boto3.Mobile 1.34.0 service\nclient: MobileClient = MobileClient(\n   aws_access_key_id: str,\n   aws_secret_access_key: str,\n   aws_session_token: str,\n)\n\n# Define a function that takes a list of dicts as input and returns a list of dicts\ndef process_data(data: List[dict]) -> List[dict]:\n   # Process the data here\n   return modified_data\n```"
"Generate Python code that uses the `django-objects-to-fixed-format` package to convert Django models to fixed format records, and the `pandas` library to convert objects to pandas DataFrames, like so:\n```\nimport django\nfrom django_objects_to_fixed_format import DjangoObjectsToFixedFormat\nimport pandas as pd\n\n# Initialize the converter\nconverter = DjangoObjectsToFixedFormat()\n\n# Convert a Django model to a fixed format record\nmodel_instance = MyModel.objects.first()\nfixed_record = converter.convert(model_instance)\n\n# Convert an object to a pandas DataFrame\nobject = MyObject.objects.first()\ndf = pd.DataFrame(object)\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.CustomerProfiles 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```\nfrom typing import List, Dict\nfrom boto3.customer_profiles import CustomerProfile, CreateCustomerProfileRequest\n\n# Annotate the types of the boto3.CustomerProfiles service\ncustomer_profile: CustomerProfile = CustomerProfile(\n   customer_name=\"John Doe\",\n   email=\"johndoe@example.com\",\n   phone_number=\"555-1234\"\n)\n\ncreate_customer_profile_request: CreateCustomerProfileRequest = CreateCustomerProfileRequest(\n   customer_profile=customer_profile\n)\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.LocationService 1.34.18 service using mypy-boto3-builder 7.23.1, like this:\n```python\nfrom typing import List, Dict\nfrom botocore.client import BaseClient\nfrom boto3.location_service import LocationService\n\n# Annotate the types for the LocationService client\nclient: LocationService = BaseClient(\n   servicename=\"location\",\n   api_version=\"1.34.18\"\n)\n\n# Define a function to get the location data\ndef get_location_data(location_id: str) -> List[Dict]:\n   response = client.get_location(location_id=location_id)\n   return response[\"locations\"]\n```"
"Generate Python code that imports the necessary modules and annotates the OpsWorksCM 1.34.0 service with type hints using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nimport boto3\nfrom mypy_boto3_builder import TypeAnnotator\n\nopsworks_cm = boto3.client('opsworkscm')\n\n@TypeAnnotator(module_name='boto3', client=opsworks_cm)\nclass OpsWorksCMTypedClient:\n   def __init__(self) -> None:\n       self.client = opsworks_cm\n\n   def create_app(self, app_name: str, app_type: str) -> dict:\n       return self.client.create_app(app_name, app_type)\n\n   def delete_app(self, app_id: str) -> None:\n       return self.client.delete_app(app_id)\n\n   def update_app(self, app_id: str, app_type: str) -> None:"
"Generate Python code that imports the Flask API and the Request Validation library, creates a decorator function that validates incoming JSON requests using the Request Validation library, and then passes the validated data to the decorated endpoint function."
"Generate Python code that implements a hierarchical data modeling framework for modern science data standards, supporting the creation of datasets, datasets collections, and data packages, with support for various data formats and validation against data standards such as ISO19115, ISO19117, and ISO19142."
"Generate Python code that imports the required modules and sets up the OneDrive API client using the deprecated SDK, targeting version 2.0 or earlier, for compatibility with legacy applications:\n```python\nimport os\nfrom onedrivesdk import OneDriveClient\n\nclient = OneDriveClient(client_id='YOUR_CLIENT_ID', client_secret='YOUR_CLIENT_SECRET', auth_server_url='https://login.live.com')\n```"
"Generate Python code that imports the pytest module, creates a custom marker interface, defines a new function that takes a test function as an argument, and appends the current timestamp in ISO format to the beginning of the test name before running the test function; this new function returns the result of the test function and also sets up the custom marker interface to use the new function for all tests that are marked with the custom marker."
"Generate Python code that creates desktop and Start Menu shortcuts for python scripts using the `py2exe` library by importing it, creating a window with the title \"Python Script Runner\", adding two buttons with different functions using the `Button` class from `tkinter`, saving the main window's position and size before closing, and running the script again after opening the file location; also, use the `os` module to check if the script has already been run today, and only create the shortcuts if it hasn't."
"Generate Python code that creates a test client for Sanic using the `unittest` module, which includes a test case for each of the following:\n\n* Test that Sanic returns a response when a request is made to the root endpoint (\"/\").\n* Test that Sanic returns a response when a request is made to a non-existent endpoint.\n* Test that Sanic returns a response when a request is made with an invalid method.\n* Test that Sanic returns a response when a request is made with an invalid URL.\n* Test that Sanic returns a response when a request is made with a valid JSON payload.\n* Test that Sanic returns a response when a request is made with an invalid JSON payload."
"Generate Python code that imports the necessary modules and annotates the types of the ElasticInference client in boto3 version 1.34.0 using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import TypeVar\nfrom botocore.client import BaseClient\nfrom elasticinference import ElasticInference\n\nT_ElasticInference = TypeVar('T_ElasticInference', bound='ElasticInference')\nT_BaseClient = TypeVar('T_BaseClient', bound='BaseClient')\n\nclass MyElasticInference(ElasticInference):\n   def __init__(self, *args: T_BaseClient, **kwargs: T_BaseClient) -> None:\n       super().__init__(*args, **kwargs)\n\nmy_elasticsearch = MyElasticInference(\n   region='my-region',\n   credentials=None,\n   config=None,\n)\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.WAFRegional 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom boto3.waf_regional import WAFRegional\n\nmy_waf_regional_client: WAFRegional = WAFRegional(\n   client=BaseClient(\n       aws_access_key_id='YOUR_AWS_ACCESS_KEY',\n       aws_secret_access_key='YOUR_AWS_SECRET_KEY',\n       region='YOUR_REGION'\n   )\n)\n\n# Annotate the types of the methods and properties\nmy_waf_regional_client.describe_web_acls().response_type = List[dict]\nmy_waf_regional_client.get_web_acl().response_type = dict\nmy_waf_regional_client.put_web_acl().parameters"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.MediaConvert 1.34.12 service using mypy-boto3-builder 7.23.0, like this:\n```python\nfrom typing import List, Dict\nfrom botocore.client import BaseClient\nfrom boto3.mediaconvert import MediaConvert\n\n# Annotate the types of the MediaConvert client\nmc = MediaConvert(\n   client=BaseClient,\n   config=None,\n   region=\"us-west-2\",\n)\n\n# Annotate the types of the MediaConvert client's methods\nmc.create_job(\n   job_template={\n       \"input\": {\n           \"sources\": [\n               {\"source\": \"s3://my-bucket/my-video.mp4\"}\n           ]\n       },\n       \"output\": {\n           \"destination\": \"s3://my-bucket/output\"\n       }\n   },\n   # Other parameters...\n)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.KinesisVideo 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import KinesisVideoClient\n\n# Define type hints for boto3.KinesisVideo methods\nclass KinesisVideo(BaseClient):\n   def create_stream(self, StreamName: str, Description: str = None) -> dict:\n       return self.call(\"create_stream\", StreamName, Description)\n\n   def delete_stream(self, StreamName: str) -> None:\n       return self.call(\"delete_stream\", StreamName)\n\n   def list_streams(self, Limit: int = None) -> List[dict]:\n       return self.call(\"list_streams\", Limit)\n\n   def describe_stream(self, StreamName: str) -> dict:\n       return self.call(\"describe_stream\", StreamName)\n"
"Generate Python code that imports the required modules and annotates the types of the boto3.DatabaseMigrationService service, version 1.34.0, using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import Callable\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import ServiceClientBuilder\n\nclass DatabaseMigrationService(BaseClient):\n   def __init__(self, *, config: dict = None, **kwargs) -> None:\n       super().__init__(config=config, **kwargs)\n       self.config = config\n\n   def create_migration(self, *, migration_type: str, selection: str, *, dry_run: bool = False, **kwargs) -> dict:\n       return self._create_migration(migration_type, selection, dry_run=dry_run, **kwargs)\n\n   def describe_migration(self, *, migration_arn: str, **kwargs) -> dict:\n       return self._describe_migration(migration_arn, **kwargs)"
"Generate Python code that imports the required modules and annotates the types for the boto3.SimpleDB 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\nannotator = TypeAnnotator(BaseClient)\n\n# Define type annotations for boto3.SimpleDB 1.34.0 service\nclass SimpleDB(BaseClient):\n   def __init__(self, *args, **kwargs):\n       \"\"\"\n       Initializes a new instance of the SimpleDB class.\n       :param args: List[str]\n       :param kwargs: dict\n       \"\"\"\n       super().__init__(*args, **kwargs)\n   \n   def create_domain(self, DomainName: str, *, Description: str = None, **kwargs):\n       \"\"\"\n       Creates a new domain.\n       :param DomainName: str\n       :param Description: str\n       :param kwargs: dict\n       :rtype"
"Generate Python code that imports the necessary libraries and loads the Nowcasting Dataset, which includes weather data from 2016 to 2020 for 37 cities across the United States, Canada, and Europe, with variables such as temperature, dew point, wind speed, and precipitation, and contains both hourly and daily observations.\n\nHere is an example of how you could generate Python code to accomplish this task:\n```\nimport pandas as pd\nimport numpy as np\n\n# Load the Nowcasting Dataset\ndf = pd.read_csv('nowcasting_dataset.csv')\n\n# Select only the desired variables\ndf = df[['temperature', 'dew_point', 'wind_speed', 'precipitation']]\n\n# Convert the data to a suitable format\ndf = df.astype({'temperature': float, 'dew_point': float, 'wind_speed': float, 'precipitation': bool})\n\n# Split the dataset into training and testing sets\ntrain_df, test_df = df.split(test_size=0.2)\n```"
"Generate Python code that imports the SQLQueryEngine module and creates a connection to a MySQL database, executes a SELECT statement, and prints the results to the console.\n\nHere is an example of how this could be done:\n```\nfrom sqlqueryengine import *\n\nconn = connect('MySQL', host='localhost', user='root', passwd='password')\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM employees\")\nresults = cursor.fetchall()\nfor row in results:\n   print(row)\n```\nThis code imports the `sqlqueryengine` module, creates a connection to a MySQL database using the `connect()` function, specifies the host, username, and password. Then it creates a cursor object and execute a select statement using the `cursor.execute()` method, fetches all the rows from the result set using the `cursor.fetchall()` method and finally iterates over the rows and prints them to the console using a for loop."
"Generate Python code that imports the necessary modules and annotates the types of the IoT Events Data service, version 1.34.0, using mypy-boto3-builder, version 7.21.0:\n```\nfrom typing import List, Dict\nfrom boto3.iot import IoTEventsData\n\n# Define the type annotations for the IoT Events Data service\nclass IoTEventsDataClient(IoTEventsData):\n   def __init__(self, config: dict) -> None:\n       self.config = config\n   \n   def send_events(self, events: List[dict]) -> None:\n       \"\"\"\n       Sends an array of events to the IoT Events data plane.\n       \n       :param events: The list of events to send\n       :type events: list of dict\n       :return: None\n       \"\"\"\n       pass\n   \n   def receive_events(self, next_token: str) -> List[dict]:\n       \"\"\"\n       Receives an array of events from the IoT Events data plane.\n       \n       :param next_token: The token to use when paginating"
"Generate Python code that exports Prometheus metrics to OpenCensus using the OpenCensus exporter.\n\nHere is an example of Python code that could be used to export Prometheus metrics to OpenCensus using the OpenCensus exporter:\n```\nimport prometheus.client\nfrom opencensus import stats\n\n# Initialize the Prometheus client\nclient = prometheus.client.PrometheusClient()\n\n# Get a list of all metrics from the Prometheus client\nmetrics = client.get_metric_families()\n\n# Iterate over each metric family and export it to OpenCensus\nfor metric_family in metrics:\n   # Create a new OpenCensus view for this metric family\n   view = stats.View('prometheus_exporter', metric_family['name'])\n\n   # Add the metric family's labels to the view\n   for label in metric_family['labels']:\n       view.add_label(label)\n\n   # Add a counter for the number of samples in this view\n   counter = view.counter('samples')\n\n   # Iterate over each sample in the metric family and add"
"Generate Python code that imports the necessary libraries and uses the Azure Data Bricks Management Client Library to manage Azure Data Bricks resources, including creating and deleting data bricks, listing and retrieving data brick metadata, and updating data brick properties."
"Generate Python code that uses the `requests` library to send an HTTP request to a JSON API, then uses the `json` library to parse the response into a Python dictionary, which can then be used to extract information from the JSON data and create a documentation for the parsed data."
"Generate Python code that imports the requests library and creates a function that takes in a URL, headers, and data, and returns the response object from the request made to the given URL with the provided headers and data, while also providing additional functionality for handling rate limiting, retry logic, and customizable authentication."
"Generate Python code that imports the necessary libraries and defines a function to convert aprophecy file to a python script, using the prophecy library to parse the apriopriaphel statement and extract the function name and input/output types, and then generates apython script that calls the extracted function with randomly generated inputs of the corresponding types."
"Generate Python code that imports the necessary modules and annotates the ServiceQuotas client class with type hints using the mypy-boto3-builder tool, like so:\n```\nfrom typing import Optional\nfrom botocore.client import Client\nfrom mypy_boto3_builder.generators import ServiceQuotasGenerator\n\ngenerator = ServiceQuotasGenerator(Client)\ngenerated_client = generator.generate()\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 CodeCommit service client, version 1.34.6, using mypy-boto3-builder version 7.23.0, like this:\n```python\nfrom typing import Callable\nfrom botocore.client import BaseClient\nfrom boto3.codecommit import CodeCommit\n\ndef create_code_commit_client(region: str) -> CodeCommit:\n   return CodeCommit(region=region)\n\n# Usage: c = create_code_commit_client('us-west-2')\n```"
"Generate Python code that imports the necessary modules and annotates the LexModelBuildingService class with type hints using the mypy-boto3-builder library, like so:\n```python\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import LexModelBuildingService\n\nclass MyLexModelBuildingService(LexModelBuildingService):\n   def __init__(self, client: Optional[BaseClient] = None) -> None:\n       self.client = client\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.signer 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Tuple\nfrom botocore.vendored import requests\nfrom boto3.signer import Signer\n\nSigner(\n   client=requests.Session(),\n   auth=None,\n   credentials=None,\n   config=None,\n).sign_request(\n   request_dict={\n       'method': 'POST',\n       'url': 'https://example.com',\n       'data': {'key1': 'value1'},\n       'headers': {\n           'Content-Type': 'application/json'\n       }\n   },\n   operation_name='operation_name'\n)\n```"
"Generate Python code that imports the necessary modules and annotates the types for an S3 service using aiobotocore.S3 2.9.0 and mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Callable\nfrom aiobotocore.client import AiobotocoreClient\nfrom aiobotocore.services import S3\n\nasync def main() -> None:\n   client = AiobotocoreClient(\n       credentials=None,\n       service=S3(\n           region=\"us-west-2\",\n           bucket_name=\"my-bucket\",\n           key=\"data.txt\"\n       )\n   )\n   # Perform some operation on the S3 resource\n   await client.get_object(Bucket=\"my-bucket\", Key=\"data.txt\")\n```"
"Generate Python code that imports the necessary libraries and sets up a client object for the Google Cloud Dialogflow Cx API, similar to the following package description:\n\n\"The Google Cloud Dialogflow Cx API client library provides a Python interface for interacting with the Google Cloud Dialogflow Cx API. This library allows you to build conversational interfaces for various platforms, including Google Assistant, Facebook Messenger, Slack, and more. With this library, you can create and manage conversational flows, handle user input, and integrate with other Google Cloud services like Google Cloud Storage and Google Cloud Functions.\""
"Generate Python code that imports the necessary modules and annotates the types of the boto3.CodeStarNotifications 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List, Dict\nfrom boto3.code_star_notifications import CodeStarNotifications\nfrom boto3.code_star_notifications.types import (\n   CreateNotificationRequest,\n   CreateNotificationResponse,\n   DeleteNotificationRequest,\n   DeleteNotificationResponse,\n   DescribeNotificationRequest,\n   DescribeNotificationResponse,\n   GetNotificationRequest,\n   GetNotificationResponse,\n   ListNotificationsRequest,\n   ListNotificationsResponse,\n)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 RoboMaker 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import TypeVar, Generic\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import Botofiler\n\nBotofiler = TypeVar('Botofiler', bound=BaseClient)\n\ndef main() -> None:\n   # Initialize the Botofiler client\n   botofiler = Botofiler(service='robomaker')\n   \n   # Create a robot application\n   robot_app = botofiler.create_robot_application(\n       name='my_robot_app',\n       description='My robot app'\n   )\n   \n   # Print the ARN of the robot application\n   print(robot_app.arn)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.DAX 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import DaxClient\nfrom mypy_boto3_builder import MyPyBoto3Builder\n\nbuilder = MyPyBoto3Builder(service='dax', version='1.34.0')\nbuilder.annotate_types()\n\n# Example usage:\nclient = DaxClient(region='us-west-2')\nresponse = client.create_table(\n   TableName='my-table',\n   AttributeDefinitions=[\n       {\n           'AttributeName': 'id',\n           'AttributeType': 'S',\n       },\n       {\n           'AttributeName': 'name',\n           'AttributeType': 'S',\n       },\n   ],\n)\nprint(response)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.MTurk 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import TypeVar, Type\nfrom mypy_boto3_builder import BotoflowTypedHints\nfrom botocore.client import BaseClient\nfrom boto3.mturk import MTurkClient\n\nHint = TypeVar('Hint', bound=dict)\n\nclass My \u041c\u0422urkClient(MTurkClient):\n   hints: Hint = {}\n\n   def __init__(self, *args, **kwargs) -> None:\n       super().__init__(*args, **kwargs)\n       self.hints = hints = {}\n\n   def create_hit(self, *args, **kwargs) -> dict:\n       return super().create_hit(*args, **kwargs)\n\n   def list_hits(self, *args, **kwargs) -> list[dict]:\n       return super().list_hits(*args, **kwargs)\n\n   def get_hit("
"Generate Python code that imports the required modules and sets up type hints for the EC2 2.9.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Callable, Dict, List\nimport mypy_boto3_builder\nfrom aiobotocore import ClientBase, AwaitableMixin\n\nmypy_boto3_builder.set_type_hints(aiobotocore=True)\n\nclass EC2(ClientBase):\n   def __init__(self, *args: object, **kwargs: object) -> None:\n       super().__init__(*args, **kwargs)\n       self.config = kwargs.pop('config')\n       self.meta = kwargs.pop('meta')\n       self.client = self.config.construct_client('ec2', *args, **kwargs)\n\n   async def create_instances(self, *args: object, **kwargs: object) -> List[Dict]:\n       return await self.client.create_instances(*args, **kwargs)\n\n   async def run"
"Generate Python code that imports the necessary modules and annotates the types of the PinpointSMSVoice service in boto3 version 1.34.0 using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import Callable\nfrom botocore.client import BaseClient\nfrom boto3.sms_voice import PinpointSMSVoice\n\ndef send_message(\n   *,\n   message: str,\n   destination_phone_number: str,\n   origination_ phone_number: str,\n   voice_id: str,\n   max_outbound_capacity: int,\n   outbound_caller_id_prefix: str,\n   authorization_token: str,\n) -> None:\n   client = PinpointSMSVoice(\n       client=BaseClient,\n       client_name='PinpointSMSVoice',\n       config=None,\n       region='us-east-1',\n   )\n   response = client.send_message(\n       Message={\n           'Message': message,\n         "
"Generate Python code that imports the necessary modules and annotates the types of the boto3.Snowball 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Tuple\nfrom botocore.client import BaseClient\nfrom boto3.s3 import Snowball\n\n# Annotate the types of the Snowball client\nclass SnowballClient(BaseClient):\n   def __init__(self, *, config: dict = None, **kwargs) -> None:\n       self.config = config\n       self.snowball = Snowball(config=config, **kwargs)\n\n   def list_clusters(self, **kwargs) -> List[dict]:\n       return self.snowball.list_clusters(**kwargs)\n\n   def create_cluster(self, **kwargs) -> dict:\n       return self.snowball.create_cluster(**kwargs)\n\n   def delete_cluster(self, cluster_id: str, **kwargs) -> None:\n       self.snowball.delete_cluster(cluster"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 AutoScaling service, version 1.34.0, using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder.generators.auto_scaling import AutoScalingGenerated client\n\nclass AutoScaling(BaseClient):\n   def __init__(self, *args, **kwargs) -> None:\n       super().__init__(*args, **kwargs)\n       self.config = kwargs.get('config')\n       \n   def create_ scaling_policy(self, PolicyName: str, AdjustmentType: str, CoolDown: int, MetricAggregationInterval: int, ScalingAdjustments: List[dict], **kwargs) -> dict:\n       return self._create_scaling_policy(PolicyName, AdjustmentType, CoolDown, MetricAggregationInterval, ScalingAdjustments, **kwargs)\n   \n   def delete_scal"
"Generate Python code that implements dplyr-style piping operations for pandas dataframes:\n```\nimport pandas as pd\n\ndef pipe(df, *args, **kwargs):\n   \"\"\"\n   Apply a series of operations to a Pandas DataFrame using a dplyr-style pipeline.\n   \"\"\"\n   # Handle first argument as a string and pass it as a selector to the next function\n   if isinstance(args[0], str):\n       return df.apply(lambda x: x.pipe(args[0]), axis=1)\n   \n   # If not a string, assume it's a function and apply it directly to the dataframe\n   else:\n       return df.apply(args[0], axis=1)\n   \n   # Recursively call the pipe function with the remaining arguments\n   return pipe(df, *args[1:], **kwargs)\n\n# Example usage:\ndf = pd.read_csv('data.csv')\nresult = pipe(df, 'filter', 'where', 'a > 5', 'select', 'a, b')\nprint(result)\n```\nThis code defines a `pipe"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.SageMakerFeatureStoreRuntime 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import TypeVar, Generic\nfrom botocore.client import BaseClient\nfrom sagemaker.feature_store import FeatureStore\n\nclass SageMakerFeatureStoreRuntime(BaseClient):\n   def __init__(self, config: dict) -> None:\n       self.config = config\n   \n   def create_feature_group(self, FeatureGroupName: str, Description: str) -> None:\n       pass\n   \n   def list_feature_groups(self) -> List[dict]:\n       pass\n   \n   def describe_feature_group(self, FeatureGroupName: str) -> dict:\n       pass\n   \n   def create_feature(self, FeatureName: str, FeatureType: str, Description: str) -> None:\n       pass\n   \n   def list_features(self) -> List[dict]:\n       pass"
"Generate Python code that implements a pytest plugin to display real-time test progress status, using the `pytest` and `rich` libraries, like this:\n```python\nimport pytest\nfrom rich.console import Console\n\ndef setup_ fortmat():\n   console = Console()\n   return console.setup(description='Testing...')\n\ndef teardown_fortmat():\n   console.teardown()\n\n@pytest.fixture(autouse=True)\ndef setup_function(request):\n   console = Console()\n   request.config.plugin manager.register(MyCustomPlugin(), '--custom-option', action=console.setup)\n   return console.setupsocket(request.node.name)\n\n@pytest.fixture(autouse=True)\ndef teardown_function(request):\n   console.teardown()\n   request.config.plugin manager.unregister(MyCustomPlugin())\n\nclass MyCustomPlugin:\n   def __init__(self, *args, **kwargs):\n       self.console = Console()\n\n   def handle_test_event(self, event, test"
"Generate Python code that sends JSON-RPC requests using the `requests` library, where the request data is a dictionary object converted to JSON format using the `json` module."
"Generate Python code that imports the necessary modules and creates a type-safe database client for interacting with a Prisma database, using the Prisma Client Python library."
"Generate Python code that logs Django Rest Framework requests to the database using a custom logger that writes to a SQLite database, including request and response data, timestamp, client IP address, and user agent."
"Generate Python code that implements a Rigetti QCS RPC framework and message specification using the `json` library to define the message format and the `requests` library to send HTTP requests between the client and server."
"Generate Python code that imports the necessary libraries and creates a wrapper function for the DataDetection framework on macOS, allowing users to easily interact with the framework's functionality from their Python scripts."
"Generate Python code that imports the necessary libraries and creates a Kinetica DB client object to interact with a Kinetica database, including creating tables, inserting data, selecting data, updating data, and deleting data."
"Generate Python code that creates a plan for dispatching calls based on a graph of functions and data dependencies using the `graphlib` library to represent the graph and `functools` library to decorate functions with dependency information."
"Generate Python code that creates a flexible data layer for machine learning using Yoga Data Layer by importing the necessary libraries, defining a data source, creating a schema, loading data into the data layer, and querying the data using SQL."
"Generate Python code that imports the json module and creates a dictionary to store JSON data, parses JSON files using the json.loads() function, and converts dictionaries to JSON format using the json.dumps() function for elegant handling of JSON data."
"Generate Python code that imports the necessary modules and sets up a connection to a Databricks cluster, allowing you to interact with Databricks databases and tables, create and run SQL queries, and perform data engineering tasks such as data loading and cleaning."
"Generate Python code that creates a library for recording and reading data in Jupyter and nteract Notebooks, using the `ipywidgets` and `numpy` libraries to create interactive widgets and manipulate data, and the `pandas` library to read and write data to CSV files."
"Generate Python code that imports the required modules and uses the `resolve` function from the `dnpy` library to resolve dotted names, similar to the `importlib.util.module_from_name` function but also works for non-modules, and returns the resolved module or object."
"Generate Python code that imports the Kedro-Datasets module and returns a list of all available data connectors.\n\nHere's an example of what the code might look like:\n```\nfrom kedro.datasets import DataConnectors\n\nconnectors = DataConnectors().get_available()\n```"
"Generate Python code that implements a simple authentication client using the requests library to send HTTP requests and the JSON library to parse responses, including functions for registering a new user, logging in, and retrieving information about the authenticated user."
"Generate Python code that imports the required modules and sets up type hints for the boto3 Budgets service using mypy-boto3-builder, like so:\n```python\nfrom typing import Optional\nfrom botocore.client import BotocoreClient\nfrom boto3.budgets import Budgets\n\nbotocore_client = BotocoreClient()\nbudgets_client = Budgets(botocore_client)\n```"
"Generate Python code that imports the asyncio module and defines a decorator named `retry` that takes a function and a list of exceptions to catch, and returns a new function that retries the original function up to 3 times upon encountering any of the specified exceptions, using the `asyncio.create_task()` function to run the function asynchronously."
"Generate Python code that uses the `gzip` module to compress response data in a Flask app, for example:\n```\nimport flask\nimport gzip\n\napp = flask.Flask(__name__)\n\n@app.route('/')\ndef index():\n   data = 'Hello, World!'\n   compressed_data = gzip.compress(data.encode('utf-8'))\n   return flask.Response(compressed_data, content_type='text/plain;charset=UTF-8')\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.Batch client using mypy-boto3-builder:\n```python\nfrom typing import Callable, Dict, List, Optional\nfrom boto3.batch import BatchClient\nfrom mypy_boto3_builder.generators import MyPyBoto3Builder\n\nbuilder = MyPyBoto3Builder(BatchClient)\ngenerated_client = builder.generate()\n```"
"Generate Python code that imports the required modules and annotates the boto3.Outposts 1.34.0 service with type hints using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\nannotator = TypeAnnotator(module_name='boto3.outposts', version='1.34.0')\nannotator.annotate_ Client('outposts', base_client=BaseClient)\n```"
"Generate Python code that imports the necessary modules and annotates the boto3 ACMPCA 1.34.0 service with type hints using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import TypeVar, Callable\nfrom botocore.client import BaseClient\nfrom boto3.acmpca import ACMPCA\n\nACMPCA_client: TypeVar('ACMPCA_client', bound='ACMPCA') = BaseClient\n\ndef get_acmpca(region: str) -> ACMPCA_client:\n   return ACMPCA(region)\n```"
"Generate Python code that imports the required modules and annotates the necessary types for the boto3.SSOOIDC 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder.generators.boto3 import Boto3Generator\n\n generator = Boto3Generator(\n   client=BaseClient,\n   module_name='boto3',\n   version='1.34.0',\n   builder_version='7.21.0',\n)\n\ngenerator.generate()\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.SSOAdmin service, version 1.34.0, using mypy-boto3-builder version 7.21.0, as follows:\n```python\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom boto3.ssoadmin import SSOAdminClient\n\nss_service = SSOAdminClient(\n   client=BaseClient(\n       aws_access_key_id='YOUR_AWS_ACCESS_KEY',\n       aws_secret_access_key='YOUR_AWS_SECRET_KEY',\n       aws_session_token='YOUR_AWS_SESSION_TOKEN'\n   )\n)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 IoT Events 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import MyPyBoto3Builder\n\nbuilder = MyPyBoto3Builder(service='iotevents', version='1.34.0')\nbuilder.set_type_annotations()\n\n# Example usage:\nclient = BaseClient(service=builder.service)\nresponse = client.describe_thing(ThingName='my-thing')\nprint(response.ThingArn)\n```"
"Generate Python code that imports the necessary libraries and annotates the boto3 Marketplace Metering client using type hints, like so:\n```\nfrom typing import Callable\nimport boto3\nfrom boto3.client import MarketplaceMetering\n\ndef get_metering_data(\n   marketplace_id: str,\n   metering_name: str,\n   *,\n   next_token: str = None,\n   max_results: int = None,\n) -> dict:\n   client = boto3.client(\"marketplace-metering\", version=1.34.0)\n   return client.get_metering_data(\n       marketplace_id=marketplace_id,\n       metering_name=metering_name,\n       next_token=next_token,\n       max_results=max_results,\n   )\n```"
"Generate Python code that imports the rrdtool module and creates a new round-robin database file named example.rrd containing a single poll interval of 1000 x 60 = 60000 data points, each point consisting of a single value (temperature in degrees Celsius) and a timestamp corresponding to 5 minute intervals starting from January 1st, 2000. The code should then write temperature data to the RRD file every hour on the hour for the next year, using the formula 24 + (3 * (hour % 2)) to calculate the offset for the timestamp. Finally, the code should display the contents of the RRD file in human-readable format using the rrdtool command-line utility."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.MQ 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\nannotator = TypeAnnotator(module_name='boto3', version='1.34.0')\nannotator.annotate(BaseClient)\n\n# Define the types of the boto3.MQ 1.34.0 service\nclass MQClient(BaseClient):\n   def __init__(self, *args, **kwargs):\n       super().__init__(*args, **kwargs)\n       self.config = kwargs['config']\n   \n   def send_message(self, topic: str, message: dict) -> None:\n       pass\n   \n   def receive_messages(self, topic: str, num_messages: int = 1) -> List[dict]:\n       pass\n```"
"Generate Python code that implements a Flake8 plugin which forbids printf-style string formatting:\n```python\nimport flake8plugin\n\nclass ForbidPrintfStyleFormatting(flake8plugin.Checker):\n   name = 'Forbid Printf Style Formatting'\n   version = '1.0'\n\n   def check_node(self, node, *args, **kwargs):\n       if isinstance(node, ast.Call) and node.func.id == 'printf':\n           raise flake8plugin.Flake8Exception('printf-style string formatting is forbidden')\n       return None\n```\nThis code defines a Flake8 plugin called `Forbid Printf Style Formatting` that checks for instances of the `printf` function being used in a string format. If such an instance is found, it raises a `Flake8Exception`. The plugin can then be installed and used like any other Flake8 plugin."
"Generate Python code that imports the required modules and annotates the types for the boto3.Translate 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\ntranslator = TypeAnnotator(BaseClient)\n\n# Define the types for the Translate service\nclass Translate(BaseClient):\n   def translate_text(self, Text: str, SourceLanguageCode: str, DestinationLanguageCode: str) -> dict:\n       ...\n\n   def detect_language(self, Text: str) -> dict:\n       ...\n\n# Other methods and properties of the Translate service\n\n# End of the Translate service definition\n\n# Generated type definitions for the Translate service\ntranslator.generate_type_definitions()\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3 WorkLink 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List, Dict\nfrom boto3 import ServiceResource\n\nService = ServiceResource('worklink', '1.34.0')\n\n@Service.client\nclass WorkLinkClient:\n   def __init__(self, config: dict) -> None:\n       self.config = config\n\n   def create_app(self, name: str, description: str) -> dict:\n       return self.get_waiter().create_app(name, description)\n\n   def list_apps(self) -> List[dict]:\n       return self.get_waiter().list_apps()\n\n   def delete_app(self, app_id: str) -> None:\n       return self.get_waiter().delete_app(app_id)\n\n   def get_app(self, app_id: str) -> dict:\n       return self.get_waiter().get"
"Generate Python code that imports the required modules and annotates the types for the boto3.MWAA 1.34.18 service using mypy-boto3-builder 7.23.1, like this:\n```python\nfrom typing import List, Dict\nfrom botocore.client import BaseClient\nfrom boto3.MWAA import MWAA\n\n# Annotate the types for the boto3.MWAA 1.34.18 service\nclass MyMWAA(MWAA):\n   def __init__(self, config: Dict) -> None:\n       super().__init__(config=config)\n\n   @property\n   def client(self) -> BaseClient:\n       return self._client\n\n   def list_resource_groups(self, PaginationConfig: List[Dict]) -> List[Dict]:\n       return self._list_resource_groups(PaginationConfig)\n\n   def get_resource_group(self, ResourceGroupArn: str) -> Dict:\n       return self._get_resource_group(ResourceGroupArn)\n\n   def create_resource"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.WorkSpaces 1.34.17 service using mypy-boto3-builder 7.23.1, like this:\n```python\nfrom typing import List, Dict\nfrom boto3.workspaces import WorkSpace, DescribeWorkSpaceResponse, CreateWorkSpaceRequest\n\n# mypy-boto3-builder generates type hints for boto3 methods\ndescribe_workspace_response = DescribeWorkSpaceResponse(\n   work_space=WorkSpace(\n       id=\"string\",\n       name=\"string\",\n       description=\"string\",\n       bundle_id=\"string\",\n       owner=\"string\",\n       created_time=datetime(2023, 3, 21, 15, 29, 59),\n       updated_time=datetime(2023, 3, 21, 15, 29, 59),\n       compute_type=\"string\",\n       user_data=\"string\",\n       volume_encryption_key=\"string\",\n       root_"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.SageMakerRuntime 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Tuple\nfrom botocore.client import BaseClient\nfrom sagemaker_runtime import SageMakerRuntime\n\n# Annotate the types of the boto3.SageMakerRuntime 1.34.0 service\nclass SageMakerRuntimeClient(BaseClient):\n   def __init__(self, *, config: Optional[dict] = None) -> None:\n       self.config = config\n       self.client: SageMakerRuntime = None\n   \n   def create_endpoint(self, *, endpoint_name: str, instance_count: int, \n           instance_type: str, vpc_config: dict, security_group_ids: List[str], \n           subnets: List[str]) -> Tuple[str, int]:\n       pass\n   \n   def delete_endpoint(self, *, endpoint_name"
"Generate Python code that imports the required libraries, creates a PostgreSQL database connection using SQLAlchemy, and uses the CITEXT data type for a column in a table, like this:\n```python\nfrom sqlalchemy import create_engine, Column, Integer, Text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nimport citest\n\nBase = declarative_base()\n\nclass MyTable(Base):\n   __tablename__ = 'mytable'\n   id = Column(Integer, primary_key=True)\n   name = Column(Text)\n   citext_column = Column(citest.CITEXT)\n\nengine = create_engine('postgresql://user:password@host:port/dbname')\nBase.metadata.create_all(engine)\n\n# Use the CITEXT column in a query\nsession = Session(engine)\nresult = session.query(MyTable).filter_by(citext_column=' foo').all()\nfor row in result:\n   print(row.name)\n```"
"Generate Python code that adds a compare view to django-reversion for comparing two versions of a reversion model:\n```python\nfrom django_reversion import views, models\n\nclass CompareView(views.generic.DetailView):\n   template_name = 'reversion/compare.html'\n   context_object_name = 'version1'\n   \n   def get_queryset(self):\n       return models.Revision.objects.all()\n   \n   def get_context_data(self, **kwargs):\n       context = super().get_context_data(**kwargs)\n       context['version2'] = self.request.GET.get('version2')\n       return context\n   \n   def post(self, request, *args, **kwargs):\n       version1_id = request.POST.get('version1')\n       version2_id = request.POST.get('version2')\n       version1 = models.Revision.objects.get(id=version1_id)\n       version2 = models.Revision.objects.get(id=version2_id)\n       diff = version1.diff("
"Generate Python code that imports the required modules and annotates the necessary types for the boto3.ResourceGroups 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom boto3.resourcegroups import ResourceGroup, Tag\nfrom boto3.session import Session\n\nsession = Session()\nrg_list = session.client(\"resourcegroupstaggingapi\").get_resource_groups(Filters=None)[\"ResourceGroupInfoList\"]\ntag_list = session.client(\"resourcetaggingapi\").get_tags_for_resource(rg_list[0][\"ResourceARN\"])[\"TagList\"]\nprint(f\"Resource Groups: {rg_list}\")\nprint(f\"Tags: {tag_list}\")\n```\nThis code uses the `mypy-boto3-builder` package to generate type hints for the `boto3.ResourceGroups` service, which is version 1.34.0 in this example. It then imports the required modules, creates a `Session` object, and calls the `get_resource_groups"
"Generate Python code that implements a Redis-based Django app that locks out users after too many failed login attempts:\n```python\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import SuspiciousOperation\nimport redis\n\ndef lock_out_user(username, lock_time):\n   user = User.objects.get(username=username)\n   if user.last_login_attempt > timedelta(minutes=lock_time):\n       raise SuspiciousOperation(\"Account locked due to excessive login attempts\")\n   else:\n       user.last_login_attempt = timezone.now()\n       user.save()\n       return False\n\ndef check_lockout(request):\n   username = request.POST.get('username')\n   lock_time = request.POST.get('lock_time')\n   if lock_out_user(username, lock_time):\n       return HttpResponse(\"Account locked, try again later.\")\n   return None\n\ndef view(request):\n   if request.method == 'POST':\n       check_lockout(request)\n   return render(request"
"Generate Python code that imports the required modules and annotates the types for the Connect service of boto3 version 1.34.18 using mypy-boto3-builder version 7.23.1, like so:\n```python\nfrom typing import Callable, Dict, List, Optional, Tuple\nfrom botocore.client import BaseClient\nfrom boto3.s3.transfer import TransferConfig\n\nclass ConnectService:\n   def __init__(self, client: BaseClient) -> None:\n       self.client = client\n   \n   def connect(self, *, endpoint: str, timeout: float, **kwargs: Any) -> None:\n       \"\"\"\n       Connects to an AWS service.\n       \n       :param endpoint: The URL of the service to connect to.\n       :type endpoint: str\n       :param timeout: The maximum amount of time to wait before giving up.\n       :type timeout: float\n       :keyword arguments: Additional parameters to pass to the connection attempt.\n       :rtype: None\n       \"\"\"\n       return None\n\n   def disconnect(self) -> None:\n     "
"Generate Python code that imports the `graphql-client` library and creates a client object to interact with a GraphQL server, using the `graphql-client.GraphQLClient` class."
"Generate Python code that creates a logging system for experimental data, including a function to save data to a CSV file and a function to visualize the data using Matplotlib."
"Generate Python code that uses the requests module to interface with the Databricks API, allowing users to create and manage clusters, jobs, and datasets on the Databricks platform."
"Generate Python code that uses the Sphinx framework to automatically generate API documentation for entire modules, including function descriptions, parameter lists, and example usage."
"Generate Python code that imports the requests library and uses it to make an HTTP request to the EPSG database URL, parsing the response into a usable format for easy access to the EPSG data."
"Generate Python code that imports the openpyxl-templates module and creates a template from a sample Excel file, allowing you to read and write data to the template using its defined structure."
"Generate Python code that imports the requests library and creates a function called `make_request` that takes in a URL, method, and data dictionary as arguments, and returns the response object."
"Generate Python code that imports the requests library and uses it to send HTTP GET requests to a JSON API, parsing the responses as JSON data and returning the parsed data in a dictionary format."
"Generate Python code that creates a basic content provider framework for Zope templates, allowing developers to create, manage, and render reusable template fragments using Zope's template engine."
"Generate Python code that imports the necessary modules and creates wrappers for the CoreMotion framework on macOS, allowing developers to access the framework's functionality from their Python scripts."
"Generate Python code that imports the google-cloud-datastore library and creates a client object to interact with a Google Cloud Datastore database, allowing for CRUD operations on entities and queries."
"Generate Python code that imports the google-cloud-datastore library and creates a client object to interact with a Google Cloud Datastore database, allowing for CRUD operations on entities and queries."
"Generate Python code that imports the necessary modules and creates a DBAPI 2.0 interface and SQLAlchemy dialect for Databricks interactive clusters using the `databricks` library and `sqlalchemy` library."
"Generate Python code that creates a data framework for biology, complete with data models for various types of biological data, querying and analysis tools, and integration with popular bioinformatics tools."
"Generate Python code that imports the necessary libraries for data preparation, cleans and preprocesses data, converts data formats, aggregates and merges datasets, and performs data validation and visualization."
"Generate Python code that uses the `jsonrpc` library to process JSON-RPC requests, including parsing request data from JSON, calling methods based on the request parameters, and returning responses in JSON format."
"Generate Python code that uses the `inspect` module to retrieve information about functions, classes, and variables defined in the Python standard library, and create documentation pages for them using the `nbdev` module."
"Generate Python code that uses the `openapi` library to generate an OpenAPI document from a Python annotation, and then use the `pydantic` library to validate request and response data against the generated OpenAPI schema."
"Generate Python code that uses the `import_module` function from the `sphinx.ext.dependency` module to load the `jquery` module, like this:\n```\nfrom sphinx.ext.dependency import import_module\nimport_module('jquery')\n```"
"Generate Python code that imports the necessary libraries and creates a wrapper function for the DiscRecordingUI framework on macOS, allowing users to easily interact with the framework's functionality in their Python scripts."
"Generate Python code that imports the functools module and creates a decorator function that takes another function as an argument, and returns a new function that caches the results of the original function using a dictionary."
"Generate Python code that imports the necessary modules from the OSAKit framework and creates wrappers for its classes, functions, and structs, allowing developers to interact with the framework's functionality in a Pythonic way."
"Generate Python code that uses the SQLAlchemy library to create a schema display script that retrieves information about a database schema and displays it in a user-friendly format, similar to the output of the \"db schema\" command."
"Generate Python code that imports the requests library and creates a generic REST client class with methods for making GET, POST, PUT, and DELETE requests to a specified URL, including support for HTTP authentication and JSON data parsing."
"Generate Python code that implements a data access protocol, allowing clients to connect to a server and perform CRUD operations on data stored in a database, using a custom serialization format for communication between client and server."
"Generate Python code that imports the inspect module, creates a decorator that takes a function and keyword-only arguments, and uses the inspect.getfullargspec function to dynamically create a new function with the given keyword-only arguments."
"Generate Python code that imports the necessary libraries and creates an Ocient client object to interact with an Ocient database, allowing users to execute SQL queries, create and manage database objects, and perform other database operations."
"Generate Python code that uses the `type_annotations` module to generate type hints for a given function based on sampled production types, using the `sample_production_types` function to generate a representative set of types from a large dataset."
"Generate Python code that imports the SQLAlchemy module, creates a declarative base, defines a custom repr method for each model class using the column metadata, and uses the `pretty_repr` function from the `sqlalchemy` library to format the output."
"Generate Python code that defines an AWS CDK construct that creates a RESTful API using the AWS CDK API Gateway module, which retrieves data from a DynamoDB table using the AWS CDK DynamoDB module and returns the data in response to HTTP GET requests."
"Generate Python code that creates a PostgreSQL high-available orchestrator and CLI using the psycopg2 library to interact with PostgreSQL databases, the pyudev library to monitor hardware events, and the argparse library to create command line interfaces."
"Generate Python code that imports the Pandas library and creates a set of ETL utility functions for data cleaning, transformation, and loading, including data wrangling, filtering, grouping, merging, joining, and reshaping, using concise and readable code."
"Generate Python code that uses the `requests` library to send a GET request to the Walrus API to retrieve information about a specific package, and then parses the JSON response using the `json` module to extract the package's name, version, and description."
"Generate Python code that uses the `graphql` library to interact with GitHub APIs via GraphQL queries and mutations, utilizing the `requests` library to send HTTP requests and parse responses, and logs actions taken by the script using the `logging` library."
"Generate Python code that imports the necessary libraries, loads the LVIS dataset, and provides an interface for interacting with the dataset, including accessing its metadata, creating dataframes from the data, and visualizing the data using various methods."
"Generate Python code that creates wrapper functions for PySpark, allowing users to interact with Spark APIs using Python syntax and data types, while also providing additional functionality such as handling missing values, data cleaning, and data preprocessing."
"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-apache-pinot` package to create an Apache Pinot connection, database, and table, and then uses the `create_table` method to create a new table in the database."
"Generate Python code that uses the Tencent Cloud Dbbrain SDK to perform various database operations such as creating a database, creating a table, inserting data into a table, selecting data from a table, updating data in a table, and deleting data from a table."
"Generate Python code that imports the necessary modules from the SafetyKit framework and provides wrappers for the various functions and data types in the framework, allowing developers to easily interact with SafetyKit functionality in their Python applications."
"Generate Python code that uses the `tox` library to create a plugin that allows sharing of a common `tox.ini` file across repositories with high package counts by using the `os` library to read and write files, and the `json` library to parse and generate JSON data."
"Generate Python code that imports the requests library and uses it to send HTTP requests to the BioThings API, parsing the responses into usable data structures such as lists, dictionaries, or Pandas DataFrames, depending on the specific endpoint and response format."
"Generate Python code that uses the inspect module to retrieve information about the current framework and environment, and then augments SQL statements with this metadata by using string formatting to insert the information into comments at the beginning of the SQL code."
"Generate Python code that creates a boilerplate for asyncio applications with a skeleton structure, including a main function, an async function, and a callback function, and imports the necessary libraries, using the asyncio module and the functools module for decoration."
"Generate Python code that implements the Astronomical Data Analysis Software Framework (ASDF) standard, providing a flexible and extensible format for storing and sharing astronomical data, including FITS files, World Coordinate System (WCS) information, and other metadata."
"Generate Python code that imports the `dataclasses` and `json` modules, defines a dataclass with a single field, serializes it to a JSON payload using the `json.dumps()` function, and then deserializes it back into an instance of the dataclass using the `json.loads()` function."
"Generate Python code that imports the required modules and sets up a client object for the Textract service, like this:\n```\nfrom botocore.client import Client\nfrom typing import Callable\nfrom boto3.textract import Textract\n\ntextract_client = Client(service=Textract())\n```"
"Generate Python code that creates a script called `backup_restore.py` that takes in a database name, backup folder, and media folder as arguments, connects to the database, backups the database files, saves them to the backup folder, and restores the database from the backup files if necessary."
"Generate Python code that uses the requests library to perform Single-Sign On HTTP Negotiate authentication on Windows:\n```\nimport requests\n\nauth = requests.auth.HTTPNegotiateAuth(('username', 'password'))\nresponse = requests.get('https://example.com', auth=auth)\nprint(response.text)\n```"
"Generate Python code that imports the necessary libraries for data manipulation and visualization, such as Pandas and Matplotlib, and provides functions for cleaning, transforming, and visualizing data, as well as loading and saving data in various formats, including CSV, Excel, and SQL databases."
"Generate Python code that imports a random name generator library, such as `randomname` or `faker`, and uses it to create a function that generates a random name with a specified format, such as first name, last name, and email address, similar to the functionality provided by Heroku's random name generator."
"Generate Python code that imports the necessary modules, defines a retry decorator function that takes a maximum number of attempts and a callback function as arguments, and returns a decorated function that retries the original function up to the maximum number of attempts before calling the callback function."
"Generate Python code that imports the required modules and annotates the GuardDuty service client class with type hints using mypy-boto3-builder, like so:\n```python\nfrom typing import Optional\nfrom botocore.client import Client\nfrom boto3.guardduty import GuardDuty\n\nguard_duty_client = Client(service='guardduty')\n```"
"Generate Python code that imports a package or module from a Jupyter Notebook file (.ipynb) using the `import_module` function from the `IPython.nb` module, which loads the notebook file and returns a dictionary of its cells, then uses the `exec` function to execute the cell containing the package or module import statement."
"Generate Python code that imports the functools module and creates a decorator function called deprecated, which takes a message string as an argument and returns a new function that wraps the original function while printing a warning message when invoked, similar to the @deprecated decorator in the docstring of the functools module."
"Generate Python code that implements a user-friendly database interface for humans, allowing them to perform CRUD operations on databases with ease, including creating tables, inserting data, updating records, and querying data, using intuitive functions and natural language syntax, while hiding complex SQL queries and underlying database details."
"Generate Python code that imports the required modules and annotates the boto3 MediaTailor 1.34.5 service using mypy-boto3-builder 7.23.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\nannotator = TypeAnnotator(MediaTailorClient)\ngenerated_code = annotator.generate()\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 Firehose 1.34.1 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import TypeVar\nfrom botocore.client import BaseClient\nfrom botocore.types import ServiceMetadata\nfrom mypy_boto3_builder import Botohouse\n\nBotohouse(ServiceMetadata(name=\"Firehose\", version=\"1.34.1\"), BaseClient)\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.ComprehendMedical 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder.generators.comprehend_medical import ComprehendMedicalGenerator\n\n generator = ComprehendMedicalGenerator()\n client: BaseClient = generator.generate()\n```"
"Generate Python code that imports the required modules and annotates the AppMesh 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder.generators.service import ServiceGenerator\n\nappmesh = ServiceGenerator(\n   service_name='appmesh',\n   module_name='boto3_appmesh',\n   client_class=BaseClient,\n   version='1.34.0',\n)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 Inspector service client using mypy-boto3-builder, like so:\n```python\nfrom typing import TYPE_CHECKING\nfrom mypy_boto3_builder import type_annotations as ta\nfrom boto3 import client as boto3_client\n\nif TYPE_CHECKING:\n   from mypy_boto3_builder.type_annotations import Boto3Client  # noqa: F401\n\ninspector = boto3_client('inspector')\n```"
"Generate Python code that creates and validates BagIt packages using the `bagit` library, such as:\n```\nimport bagit\n\n# create a new bag\nbag = bagit.Bag()\n\n# add files to the bag\nbag.add_file('file1.txt')\nbag.add_file('file2.txt')\n\n# set bag metadata\nbag.set_metadata('title', 'My Bag')\nbag.set_metadata('creator', 'Me')\n\n# validate the bag\nif bag.validate():\n   print(\"The bag is valid\")\nelse:\n   print(\"The bag is invalid\")\n```"
"Generate Python code that sends a response object to a custom resource using an Amazon S3 presigned URL:\n```\nimport boto3\n\ns3 = boto3.client('s3')\n\n# Create a presigned URL for the custom resource\npresigned_url = s3.generate_presigned_url(\n   'put_object',\n   Params={\n       'Bucket': '<bucket-name>',\n       'Key': '<key>',\n   },\n   Expires=3600 # 1 hour\n)\n\n# Send the response object to the custom resource using the presigned URL\nresponse = requests.put(presigned_url, data='<response-data>')\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.Lightsail service using mypy-boto3-builder, like this:\n```python\nfrom typing import Tuple\nfrom botocore.client import LightsailClient\nfrom mypy_boto3_builder import TypeAnnotator\n\n lightsail_client = LightsailClient(\n   region='us-west-2',\n   endpoint='https://lightsail.us-west-2.amazonaws.com/',\n)\n\ntype_annotations = TypeAnnotator(lightsail_client).get_type_annotations()\n\n# Print the type annotations\nprint(type_annotations)\n```"
"Generate Python code that imports the necessary libraries and annotates the types of the boto3.ServerlessApplicationRepository 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder.generators import ServiceGenerator\n\ngenerator = ServiceGenerator(\n   service_name='serverlessapplicationrepository',\n   version='1.34.0',\n   builder_version='7.21.0',\n)\n\ngenerated_code = generator.generate()\n\n# Print the generated code\nprint(generated_code)\n```"
"Generate Python code that imports the necessary modules and annotates the boto3.Organizations 1.34.0 service with type hints using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import BotoflowPlugin\n\n# Annotate the boto3.Organizations service\norganizations_service = BaseClient(\n   service=boto3.client('organizations', version='1.34.0'),\n   plugins=[BotoflowPlugin()],\n)\n\n# Example usage: Get an organization\nresponse = organizations_service.get_organization(\n   OrganizationId='ORGANIZATION_ID',\n)\nprint(response.organization)\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.Route53Resolver service using mypy-boto3-builder, like this:\n```\nfrom typing import TypeVar, Generic\nfrom botocore.client import BaseClient\nfrom boto3.route53_resolver import Route53Resolver\n\n_RT = TypeVar('_RT', bound='Route53Resolver')\n\nclass MyClient(BaseClient):\n   def __init__(self) -> None:\n       super().__init__()\n       self.route53_resolver: Route53Resolver = Route53Resolver(client=self)\n\n   def resolve(self, *, query: str, timeout: float = ...) -> _RT:\n       return self.route53_resolver.resolve(query=query, timeout=timeout)\n```"
"Generate Python code that imports the Flask-Cors package and creates a Flask app with CORS enabled, including a route that returns \"Hello, World!\" when accessed from a different domain.\n\nHere is a possible implementation:\n```\nfrom flask import Flask, request, abort\nfrom flask_cors import CORS\n\napp = Flask(__name__)\napp.config['CORS_ENABLED'] = True\napp.config['CORS_ALLOWED_ORIGINS'] = ['http://example.com']\n\n@app.route('/', methods=['GET'])\ndef hello():\n   return 'Hello, World!'\n\nif __name__ == '__main__':\n   app.run(debug=True)\n```\nThis code creates a Flask app with CORS enabled, allowing requests from `http://example.com` to access the `/` route, which returns \"Hello, World!\"."
"Generate Python code that imports the required modules and annotates the Pricing service of boto3 version 1.34.0 using mypy-boto3-builder version 7.21.0, like so:\n```\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom boto3.services.pricing import Pricing\n\n# Annotate Pricing service\npricing = Pricing(\n   client=BaseClient(),\n   service_name=\"Pricing\",\n   api_version=\"2016-12-01\"\n)\n\n# Example usage: Get prices for EC2 instances in us-west-2 region\nresponse = pricing.get_products(\n   ServiceCode=\"Amazon Elastic Compute Cloud\",\n   Filters=[{\"Type\": \"TERMINATION_PROTECTION\", \"Value\": \"ENABLED\"}],\n   Region=\"us-west-2\"\n)\n\n# Print the response\nprint(response)\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.WAF 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List, Dict\nfrom botocore.client import BaseClient\nfrom boto3.waf import WAF, Rule, Actions, Trigger, XssMatchSet, RegexpPatternSet, StringMatchSet, IPSet\n\nwaf = WAF(\n   client=BaseClient,\n   config={\n       'region': 'us-east-1',\n       'describe_limits': {'max_items': 100},\n   },\n)\n\nrules = waf.list_rules(Name='ExampleRule')\n\nfor rule in rules['Rules']:\n   print(rule['RuleId'])\n\nactions = waf.list_actions(RuleId=rule['RuleId'])\n\nfor action in actions['Actions']:\n   print(action['ActionType'])\n\ntriggers = waf.list_triggers(RuleId=rule['"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.EMR 1.34.9 service using mypy-boto3-builder 7.23.0, like this:\n```\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import BotocorePlugin\n\n# Annotate the types of the boto3.EMR 1.34.9 service\nclass EMR(BaseClient):\n   def list_clusters(self) -> List[dict]:\n       return self.get_paginator('list_clusters').paginate()\n\n   def create_cluster(self, release_label: str) -> dict:\n       return self.create_resource('cluster', release_label=release_label)\n\n   def delete_cluster(self, cluster_id: str) -> None:\n       self.delete_resource('cluster', cluster_id)\n\n# Register the type annotations for the boto3.EMR 1.34.9 service\nBotocorePlugin(EMR).register"
"Generate Python code that imports the required modules and annotates the TimestreamWrite service of boto3 version 1.34.0 using mypy-boto3-builder version 7.21.0, like so:\n```python\nfrom typing import Callable\nfrom botocore.client import BaseClient\nfrom boto3.annotations import ServiceAnnotation, AnnotationArguments\nfrom mypy_boto3_builder import build_service\n\nService = ServiceAnnotation(\n   service=\"timestream-write\",\n   version=\"1.34.0\",\n   client=BaseClient,\n   annotations={\n       \"param_validation\": {\n           \"type\": \"callable\",\n           \"args\": [\"self\", \"params\"]\n       },\n       \"return_response\": {\n           \"type\": \"callable\",\n           \"args\": [\"self\", \"response\"]\n       }\n   }\n)\n\ngenerated_service = build_service(Service)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the Elastic Load Balancing service client in boto3 version 1.34.0 using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import type_annotations as ta\n\nclass ElasticLoadBalancing(BaseClient):\n   @ta.optional((\"load_balancer\", str))\n   def create_load_balancer(self, Name: str, AvailabilityZones: list[str], Subnets: list[str]) -> dict:\n       pass\n   \n   @ta.optional((\"load_balancer\", str))\n   def DescribeLoadBalancers(self, LoadBalancerArns: list[str]) -> list[dict]:\n       pass\n   \n   @ta.optional((\"load_balancer\", str))\n   def UpdateLoadBalancer(self, LoadBalancerArn: str, Name: str, AvailabilityZones: list[str], Sub"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.CloudWatchLogs service using mypy-boto3-builder, like this:\n```\nfrom typing import TypeVar, Type Alias\nfrom mypy_boto3_builder import TypeAnnotator\nimport boto3\n\nannotator = TypeAnnotator(boto3)\nannotator.register_service(\"cloudwatchlogs\")\n\n# Define type aliases for CloudWatch Logs resources\nclass CloudWatchLogsService:\n   def __init__(self, client: boto3.client(\"cloudwatchlogs\")) -> None:\n       self.client = client\n   \n   def put_log_events(self, log_group_name: str, log_stream_name: str, events: List[dict]) -> None:\n       self.client.put_log_events(log_group_name, log_stream_name, events)\n   \n   def get_log_events(self, log_group_name: str, log_stream_name: str, next_token: str) -> List[dict]:\n       return self"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 AutoScalingPlans service version 1.34.0 using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import List, Dict\nfrom boto3 import ServiceResource\n\n# Define the types of the boto3 AutoScalingPlans service version 1.34.0\nclass AutoScalingPlans(ServiceResource):\n   def describe_ scaling_plans(self) -> List[dict]:\n       \"\"\"\n       Returns a list of dictionaries representing the current scaling plans.\n       \"\"\"\n       return self.client.describe_scaling_plans()\n\n   def create_scaling_plan(self, name: str, max_size: int, min_size: int, vpc_zone_identifier: str) -> dict:\n       \"\"\"\n       Creates a new scaling plan.\n       \"\"\"\n       return self.client.create_scaling_plan(name, max_size, min_size, vpc_zone_identifier)\n\n   def update_"
"Generate Python code that implements a module allowing shell-like infix syntax using pipes:\n```python\nimport tokenize\n\ndef infix_syntax(left, op, right):\n   return f\"{left} {op} {right}\"\n\ndef pipe_tokenizer(tokens):\n   return itertools.chain(*[infix_syntax(t[0], t[1], t[2]) for t in zip(tokens[::2], tokens[1::2], tokens[2::3])])\n\ntokenize.tokengen(pipe_tokenizer)\n```\nThis code defines an `infix_syntax` function that takes three arguments and returns a string representing the infixed expression. The `pipe_tokenizer` function is then defined to iterate over the input tokens, applying the `infix_syntax` function to each pair of adjacent tokens, and returning an iterator over the resulting expressions. Finally, the `tokenize.tokengen` function is called with the `pipe_tokenizer` function as its argument, which will apply the infix syntax to any input passed through it."
"Generate Python code that creates a dictionary-like object that ignores NoneType values, similar to the `defaultdict` function from the `collections` module, but with the additional feature of ignoring NoneType values.\n\nHere is an example of how you could use this dict-like object:\n```\nmy_dict = MyDict({'a': 1, 'b': None, 'c': 3})\nprint(my_dict['a']) # output: 1\nprint(my_dict['b']) # output: None\nprint(my_dict['c']) # output: 3\n```\nThis code would create a dictionary-like object called `MyDict` that has the same features as the `defaultdict` function, but also ignores NoneType values. The `MyDict` object would have the following methods:\n\n* `__init__`: Initializes the `MyDict` object with a dictionary of default values.\n* `get()`: Returns the value associated with the given key, or the default value if the key is not present in the dictionary and the value is not NoneType.\n* `keys()`: Returns a list of all keys in the dictionary.\n"
"Generate Python code that exports blocking and asynchronous library versions from a single asynchronous implementation using the `asyncio` module and the `inspect` module, like this:\n```\nimport asyncio\nimport inspect\n\nasync def my_coroutine():\n   # My coroutine code here\n\n# Get the current task name\ntask_name = inspect.currentframe().f_code.co_name\n\n# Check if the task is running synchronously or asynchronously\nif asyncio.iscoroutine(my_coroutine) or asyncio.isfuture(my_coroutine):\n   print(\"Async version:\", task_name)\nelse:\n   print(\"Blocking version:\", task_name)\n```\nThis code defines an asynchronous function called `my_coroutine`, which can be run either synchronously or asynchronously depending on the context in which it is called. The `inspect` module is used to get the name of the currently executing task, and the `asyncio` module is used to check whether the task is being executed synchronously or asynchronously. Depending on the result of this check, the appropriate message"
"Generate Python code that imports the `request` module and returns the current request object, such as `request.get_current_request()`"
"Generate Python code that creates a CLI tool using the datadog-check module to create, validate, and run custom checks for Datadog monitoring."
"Generate Python code that imports the Teradata Python module, connects to a Teradata database, executes a SQL script, and retrieves the results."
"Generate Python code that imports the pandas library, creates a dataframe from a CSV file, and uses SQL syntax to query the data in the dataframe."
"Generate Python code that imports the necessary modules and creates a function that can serialize and deserialize Python dataclasses using Databind."
"Generate Python code that creates a Flask middleware function to add a unique request ID header to every incoming request, similar to the `request_id` package."
"Generate Python code that parses microformats data from HTML pages using the `BeautifulSoup` library and returns extracted information in a standardized format."
"Generate Python code that imports the requests library, formats data as JSON-LD, and makes HTTP POST requests to the Google Search Console API to submit sitemaps."
"Generate Python code that imports the TileDB library and creates a TileDB dataset, stores data in it, and performs various operations on the data using TileDB's API."
"Generate Python code that imports the requests library and creates a function that takes a URL as input, sends a GET request to that URL, and returns the response object."
"Generate Python code that uses Cheetah's template engine to render HTML templates with dynamic data and generates Python classes and methods based on user-defined templates."
"Generate Python code that imports the requests library and uses it to send HTTP requests to the arXiv API to retrieve information about articles, authors, and other metadata."
"Generate Python code that uses the requests library to send HTTP requests to interact with the SNC REST API, including functions to create, read, update, and delete resources."
"Generate Python code that imports the necessary libraries and creates a simple asynchronous function using the futures module, demonstrating the basic functionality of the library."
"Generate Python code that imports the sys module, creates a wrapper function for the raise statement, and defines a format string to display the traceback in a human-readable format."
"Generate Python code that implements data types and interchange formats for numbers, strings, and booleans, including functions for parsing and serializing data in JSON and CSV formats."
"Generate Python code that imports a module and loads a specified function from it, lazily loading the module only when the function is called, using the `inspect` and `importlib` modules."
"Generate Python code that creates a CloudFormation template file with a specified AWS region, account ID, and default output format, using the Boto3 library to interact with AWS services."
"Generate Python code that imports the necessary modules and defines a function that takes in data as input and returns the MurmurHash3 hash value for that data using the murmurhash module."
"Generate Python code that creates a single-server client-server database server for ZODB using the `ZEO` package, allowing clients to connect and interact with the database simultaneously."
"Generate Python code that uses the `csv` module to read a CSV file and the `dataclasses` module to define classes for the data, then maps the CSV data into instances of the defined classes."
"Generate Python code that imports the necessary libraries and creates a connection to a data.world dataset, allowing you to perform various data manipulation and analysis tasks on the data."
"Generate Python code that allows developers to create templates with variable placeholders and use Python logic to manipulate template data, similar to Zope Template Application Language (TAL)."
"Generate Python code that imports the necessary modules and creates a stub file for google-flag's flags module, containing empty functions for each flag function, like \"void Foo(int *bar) {}\"."
"Generate Python code that creates a Tortoise ORM database migrations tool using the `tortoise-orm` library, allowing users to define migration scripts in Python and apply them to their databases."
"Generate Python code that uses faker library to create fake data for application testing based on customizable templates, including names, addresses, phone numbers, emails, and other information."
"Generate Python code that uses the ClickHouse API to interface with ClickHouse databases, allowing users to create, modify, and query data in ClickHouse using the dbt (data build tool) framework."
"Generate Python code that implements a plugin for dbt to interact with Databricks databases, allowing users to run dbt commands against Databricks clusters and retrieve data from Databricks tables."
"Generate Python code that imports the necessary modules and creates a wrapper class for the CoreAudioKit framework on macOS, providing a simple interface for accessing the framework's functionality."
"Generate Python code that imports the `oauthlib` library and creates typing stubs for its functions and classes, using the `typing` module to define the types of the stubbed variables and functions."
"Generate Python code that uses the `openpyxl` library to create an Excel template from a Frictionless Table Schema, including input validation using the `validate` function from the `schema` library."
"Generate Python code that uses the Datadog APM client library to instrument and monitor a sample application, collecting performance metrics and trace data, and displaying them in the Datadog dashboard."
"Generate Python code that creates a spreadsheet in a Jupyter notebook using the `ipywidgets` library to interactively input data and the `openpyxl` library to create and manipulate the spreadsheet file."
"Generate Python code that uses the `unittest` module to write data-driven tests, using test cases defined as functions that take in input data as arguments and assert expected results based on that data."
"Generate Python code that uses the `openapi` library to generate an OpenAPI document from a API specification, and the `pydantic` library to validate request and response data against Python annotations."
"Generate Python code that imports the necessary libraries and uses the Azure Open Datasets API to retrieve and manipulate datasets, including searching for datasets, downloading data, and uploading data."
"Generate Python code that uses Jinja templating to generate documentation for a package, including a template for the package's README file and a template for documenting individual modules and functions."
"Generate Python code that imports the necessary libraries and creates a wrapper function for the PubSub framework on macOS, allowing for easy publication and subscription to messages within Python scripts."
"Generate Python code that uses the `sqlalchemy` library to create a profiler for an application that uses SQLAlchemy, including functions to get information about database queries and their execution time."
"Generate Python code that imports the necessary modules and creates wrappers for the PHASE framework on macOS, providing a simple and convenient interface for interacting with the framework's functionality."
"Generate Python code that implements the InfluxData Line Protocol format for sending metrics and other data to an InfluxDB database, including support for multiple data types, tags, and timestamped records."
"Generate Python code that imports the django.contrib.logging module, defines a custom middleware function that logs the HTTP request body using the logging.info() function, and returns the processed request."
"Generate Python code that creates a web server using Flask and a client using requests to interact with a remote dataset stored in Vaex, allowing users to view and manipulate the data through a web interface."
"Generate Python code that parses and formats HGVS (Human Genome Variation Society) formatted genetic data, maps genomic coordinates to gene names, and validates the accuracy of the data using the hgvs module."
"Generate Python code that uses the pyuno library to interact with LibreOffice and create reports using its powerful reporting tools, including support for templates, data connections, and various output formats."
"Generate Python code that imports the requests library, creates a proxy object using the requests.Session class, sets up the proxy server URL and authentication, and sends HTTP requests through the proxy server."
"Generate Python code that uses the `requests` library to send HTTP requests to Iterative Studio and the `dvc` library to interact with DVC/DVCLive, allowing users to post data from DVC/DVCLive to Iterative Studio."
"Generate Python code that imports the necessary libraries and creates a SQLAlchemy dialect for interacting with a Databricks database, allowing users to execute SQL queries and manipulate data within the database."
"Generate Python code that creates a scalable, fast, ACID-compliant data catalog using Ray's actor model and async workflows, allowing for efficient metadata management and data discovery across distributed datasets."
"Generate Python code that imports the required modules, loads the image data into a suitable format, performs appropriate preprocessing steps, and uses ITK functions to analyze the image data in multiple dimensions."
"Generate Python code that imports the requests library and sends a GET request to the Trading Economics API to retrieve economic data, parsing the JSON response into a pandas DataFrame for analysis and visualization."
"Generate Python code that defines a library with support functions for use in Odoo migration scripts, including methods for data cleaning, transformation, and loading, as well as tools for debugging and error handling."
"Generate Python code that uses the PyPDF2 library to read and write PDF files, allowing you to create and modify PDF documents programmatically, similar to the functionality provided by the PDF library of RPA Framework."
"Generate Python code that imports an SSH client library and creates a simple configuration class to store host information, then uses the SSH client to connect to hosts and perform actions based on their configurations."
"Generate Python code that implements a dictionary-based system for managing binary data, complete with functions for encoding and decoding data, storing and retrieving data, and iterating over the data in the dictionary."
"Generate Python code that allows you to create and manage Firebase Cloud Functions using the Firebase Functions Python SDK, including creating functions, deploying them to Firebase, and triggering them via HTTP requests."
"Generate Python code that reads a JSON file containing an OAuth2 client ID and creates a new file containing the client secret, using the `json` module to parse the input file and the `os` module to write the output file."
"Generate Python code that imports the necessary modules and creates wrappers for the ExtensionKit framework on macOS, allowing developers to easily interact with the framework's functionality in their Python applications."
"Generate Python code that uses the `pydantic` library to generate PEP 561 type stubs for pybind11 modules, allowing for automatic generation of type hints and documentation for functions and classes defined in the module."
"Generate Python code that implements a scalable data loading library that can handle large datasets without requiring a backend, utilizing efficient file reading and writing techniques, and supporting various data formats."
"Generate Python code that uses the psycopg2 library to connect to a PostgreSQL database and retrieve information about the schema, such as table names, column names, and data types, and print it in a human-readable format."
"Generate Python code that imports the required modules, defines a function with the appropriate signature and docstring, and uses the `invoke` function from the `typing` module to create type-safe command line invocations."
"Generate Python code that imports the requests library and uses it to send a GET request to the quickchart.io API with the necessary parameters to generate a static chart image, then returns the image data as a bytes object."
"Generate Python code that imports the necessary modules, sets up a PostgreSQL database connection using Tortoise ORM, creates a table with the appropriate columns, inserts data into the table, and queries the data using SQL."
"Generate Python code that imports the necessary libraries and creates a SiftScience client object to interact with the Sift Science API, including functions to create and manage models, predict fraud risk, and retrieve data."
"Generate Python code that uses the argparse library to create command-line interfaces for functions by defining arguments and parsing them using the parse_args() function, then calling the function with the parsed arguments."
"Generate Python code that implements a WSGI proxy with various HTTP client backends, using the `wsgiref` module for WSGI support and choosing an appropriate HTTP client backend such as `requests`, `urllib3`, or `http.client`."
"Generate Python code that uses the AWS CDK v2 library to automatically instrument Python and Node Lambda functions with Datadog, by creating a construct that wraps around the Lambda function and configures Datadog monitoring."
"Generate Python code that uses the `colcon` library to read package metadata from files, specifically the `package.yaml` file in the root directory of the package, using the `colcon.metadata.read_package_metadata()` function."
"Generate Python code that imports the XBlocks library and creates a utility module with functions for working with XBlocks, such as creating and manipulating blocks, handling events, and interacting with the XBlocks database."
"Generate Python code that imports the requests library and uses it to send HTTP requests to the Tinify API to compress and decompress images, including setting up API credentials, handling errors, and formatting response data."
"Generate Python code that imports the necessary libraries and creates an instance of the Google Cloud Certificate Manager API client library, which can be used to manage SSL certificates and create certificate signing requests."
"Generate Python code that imports the sqlite3 module and creates a connection to a SQLite database, then defines a function that takes a query as input and executes it on the database, returning the results as a list of tuples."
"Generate Python code that imports the necessary modules, configures an Exasol database connection, and uses the Airflow provider to create a DAG for fetching data from the Exasol database and loading it into an external system."
"Generate Python code that creates a CDK construct for an AWS Lambda function using the CDK library in Python, providing a boilerplate template for a serverless function that can be customized and extended to meet specific needs."
"Generate Python code that uses the requests library to make HTTP requests to the DocuSign REST API, allowing users to create, update, and delete documents, templates, and signatures, as well as manage user accounts and permissions."
"Generate Python code that imports the requests library and uses it to make API calls to TMDb to retrieve movie information, such as titles, descriptions, and cast lists, and stores the data in easily accessible python dictionaries."
"Generate Python code that imports the necessary libraries for data manipulation and analysis, such as Pandas and NumPy, and provides functions for data cleaning, transformation, and visualization, similar to the Ricequant Data SDK."
"Generate Python code that imports the MJML library and uses it to create email templates in Django, similar to how Django's built-in template engine works, but with the added functionality of MJML's powerful email building features."
"Generate Python code that implements a DB-API 2.0 interface for SQLite 3.x databases using the `sqlite3` module, allowing for connection to a database, creation of tables, insertion of data, querying of data, and closing of connections."
"Generate Python code that uses the `pytest` library to run unit tests for an ETL pipeline, including test cases for data quality checks, data transformation checks, and data loading checks, and provides detailed reports on test results."
"Generate Python code that imports the requests library and uses it to send a GET request to the Nord Pool API to retrieve the current spot prices, then parses the response data into a pandas DataFrame for easy analysis and manipulation."
"Generate Python code that acquires a mutex via the database in Django by using the `django.db.transaction` module to create a transaction, and then using the `threading.Lock` class to create a lock object that is stored in the database."
"Generate Python code that creates a flexible, non-blocking web application framework with built-in support for handling HTTP requests and responses, using Twisted for asynchronous I/O and Werkzeug for parsing and processing request data."
"Generate Python code that imports data from various sources, such as Excel files, SQL databases, and APIs, and exports it to other formats, such as CSV files, JSON files, and SQL databases, using libraries like pandas, numpy, and requests."
"Generate Python code that uses the `pandas` library to read in raw data from a CSV file, applies a series of transformations to clean and manipulate the data, and then writes the transformed data to a new CSV file, creating a feature store."
"Generate Python code that creates a library for simple interface creation, metric computation, and checkpointing; import needed modules; create classes for metrics and checkpoints; define methods in each class; run tests on created metrics."
"Generate Python code that creates a command line application using the Databricks API to manage Databricks resources, including creating and deleting clusters, creating and deleting datasets, and listing all available clusters and datasets."
"Generate Python code that imports necessary libraries for chemoinformatics and machine learning, such as RDKit and scikit-learn, and creates a module that provides functions for handling chemical data and performing predictive modeling tasks."
"Generate Python code that implements a Trino adapter plugin for dbt (data build tool) to connect to Trino databases, fetch schema information, and execute SQL queries, leveraging the dbt framework to transform and load data into Trino tables."
"Generate Python code that uses the `requests` library to make API calls to the Materials Project website, which returns data on various materials and their properties, and stores the data in Pandas DataFrames for easy analysis and manipulation."
"Generate Python code that imports the deprecation module and creates a wrapper function that accepts a deprecated alias and a new name, and uses the deprecation module to deprecate the alias while still allowing access to the original function."
"Generate Python code that imports the requests library and uses it to make an HTTP request to the Geocod.io API, passing in the necessary parameters such as API key and address information, and returns a dictionary containing the geocoded data."
"Generate Python code that implements a function parameter destructuring tool, allowing for easy extraction of values from tuples, lists, and dictionaries passed into functions, using the `inspect` module to access function parameter information."
"Generate Python code that imports the necessary libraries for data collection and analysis, such as Pandas for data manipulation and NumPy for numerical computations, and creates a framework for collecting and analyzing data from various sources."
"Generate Python code that imports the necessary libraries and uses the Robot Framework to create a test case that utilizes the HTTP/HTTPS client and server services provided by robotframework-httpctrl to perform an HTTP request and response cycle."
"Generate Python code that imports the necessary modules and uses the erl_tree module to parse an ERP format string into a nested dictionary representation, similar to how the erlang_term_to_python function in the erlang_external_term module works."
"Generate Python code that uses the `feedparser` library to parse ATOM and RSS feeds and the `pydub` library to create podcasts, allowing users to customize feed metadata and audio settings before saving the generated files to a specified directory."
"Generate Python code that uses the `json` and `typing` modules to serialize and deserialize JSON data, the `graphql-tag` library to generate GraphQL schema from Python types, and the `graphql-python` library to execute GraphQL queries and mutations."
"Generate Python code that imports the necessary libraries to create an open-source framework for representing and manipulating geometric models, such as NumPy and PyOpenGL, and defines classes and functions to implement the framework's functionality."
"Generate Python code that imports the NLTK library, Tokenize text data using NLTK's word_tokenize function, Remove stopwords from tokenized data using NLTK's corpus.stopwords module, Lemmatizes remaining words using NLTK's WordNet lemmatization tool."
"Generate Python code that implements a JSON Web Token middleware for Starlette using the `jsonwebtoken` library, which generates and verifies JWT tokens, and the `starlette.middleware` module, which provides a framework for creating middleware functions."
"Generate Python code that imports the re module and uses its compile function to create a regular expression object from a valid regular expression pattern, then uses the sample method of the re module to generate a random string that matches the pattern."
"Generate Python code that imports the unittest module, creates a mock object for urllib3 using the patch decorator from the mockk library, and defines test functions for each of the three main methods in urllib3 - request(), response(), and get_response()."
"Generate Python code that imports the necessary modules and creates a function that takes a path to a file and a value to write to that file, and then uses the atomic writes functionality to write the value to the file without overwriting any existing data."
"Generate Python code that creates a Jupyter extension to display resource usage, including CPU, memory, and disk usage, using the `psutil` library to gather system information and the `ipywidgets` library to create interactive widgets for the Jupyter notebook."
"Generate Python code that implements a reference implementation for Bech32 and segwit addresses, including encoding and decoding functions for each format, and a main function that demonstrates how to use the library to convert between different address formats."
"Generate Python code that imports the necessary libraries and uses the pyamf library to serialize and deserialize data in AMF format, similar to how the `json` module works but specifically designed for working with Adobe Media Server and its proprietary format."
"Generate Python code that imports the requests and BeautifulSoup libraries, uses the requests library to make an HTTP request to a Wikipedia API, parses the HTML response using BeautifulSoup, and extracts specific data such as article titles, summaries, and links."
"Generate Python code that imports the necessary libraries and creates a class for interacting with OpenJPEG files using the openjpeg library, including methods for reading and writing image data, retrieving metadata, and converting between different image formats."
"Generate Python code that uses the dbfpy library to read DBF files and convert them to CSV, DataFrames, HDF5 tables, and SQL tables, using the pandas library for data manipulation and the sqlite3 library for creating SQL tables, all in a Python3 compatible manner."
"Generate Python code that creates a mock data generation factory, which takes in a dataset and returns a mock dataset with similar statistical properties but different personal information, using a combination of pandas, numpy, and perhaps other relevant libraries."
"Generate Python code that imports the reprlib library and uses its functions to create short and cheap string representations, similar to the built-in repr() function but with additional features such as customizable output format and support for non-string objects."
"Generate Python code that imports the necessary libraries and utilizes the libcurl ffi bindings to make HTTP requests with impersonation support, similar to the functionality provided by the `requests` library, but using the faster and more lightweight libcurl library."
"Generate Python code that creates a badge for a tool using the Badger library, which can retrieve information about the tool from various sources such as PyPI, GitHub, and GitLab, and then create a Markdown file containing the badge image and information about the tool."
"Generate Python code that imports the necessary modules for the devpi-server, devpi-client, and other related utilities, and defines a set of functions or classes that provide the shared functionality, such as string formatting, file manipulation, and network communication."
"Generate Python code that imports the necessary libraries, such as Pandas and SQLite, to create a data load and catalog system that can read data from various sources, store it in a centralized database, and provide an easy-to-use interface for searching and retrieving data."
"Generate Python code that creates a high-performance function serving system for scientific computing using the `funcX` library, allowing users to deploy and manage scalable, secure, and versioned functions for data processing, machine learning, and other scientific workloads."
"Generate Python code that imports the dataclasses module and uses it to define a serializer class that inherits from Django REST Framework's Serializer, using the Meta-class from dataclasses to automatically generate the __init__ and __annotations__ methods for the serializer."
"Generate Python code that uses the requests library to make an API call to the Delphi COVIDcast API and retrieve the latest COVID-19 data, then parse the JSON response using the json library and extract the desired information such as case counts, deaths, and hospitalizations."
"Generate Python code that imports the necessary libraries and creates a client object to interact with Google Cloud BigQuery, allowing users to list and query datasets, create and delete tables, and perform data manipulation operations such as filtering, grouping, and joining."
"Generate Python code that imports the necessary libraries and sets up a client for interacting with the Google Analytics Data API to retrieve data from a user's Google Analytics account, including authentication and authorization, making API requests, and parsing response data."
"Generate Python code that imports the necessary libraries and creates an async client for testing ASGI web applications, using the `asgi` and `aiohttp` libraries to create a simple asynchronous client that can send HTTP requests to the ASGI application and verify its responses."
"Generate Python code that imports the ammonia HTML sanitization library and creates a function that takes in a string of HTML content and returns a sanitized version of the HTML, using the ammonia library's APIs to remove harmful code and scripts, and outputting the cleaned HTML."
"Generate Python code that uses the `requests` library to send a GET request to the Farama Foundation API to retrieve a list of all libraries maintained by the foundation, and then uses the `py notifications` library to send a notification to the user for each library on the list."
"Generate Python code that imports the necessary libraries and defines functions for converting data between columnar and row-based formats, handling particle physics data, and interacting with the Collider HEP analysis framework, allowing for not-too-alien syntax in the analysis."
"Generate Python code that imports the necessary libraries and sets up a client for using Cloud TPUs, such as `import google.auth, google.cloud.tpu; create_credentials = None; client = google.cloud.tpu.TPUClient(project=PROJECT_ID, location=LOCATION, credentials=create_credentials)`."
"Generate Python code that imports the retrying module and creates a decorator that wraps a function, allowing it to retry the function up to 3 times with increasing time intervals between retries, using the `retrying.retry` function, and returning the result of the successful attempt."
"Generate Python code that uses the `requests` library to send HTTP requests to Script Launchpad's web services interfaces, allowing you to interact with the platform and perform various tasks such as creating, reading, updating, and deleting scripts, as well as managing users and groups."
"Generate Python code that imports the necessary modules for profiling and optimization, creates a profiling object, starts the profiling process, collects data on CPU, GPU, and memory usage, generates reports and visualizations of the data, and provides AI-powered optimization suggestions."
"Generate Python code that defines a class called `MyView` that inherits from Flask's `RenderTemplateMixin`, uses `Flask` as its template engine, and has a `render()` method that takes a template name and dictionary of context data as arguments, rendering the template with the given context."
"Generate Python code that creates a developers tool for datadog checks by defining a class that inherits from datadogs check base class, overrides the necessary methods and defines a custom check function that utilizes datadogs API to retrieve metrics and display them in an interactive dashboard."
"Generate Python code that uses the osm library to download OpenStreetMap data, the networkx library to model the streets as a graph, the geopandas library to analyze the spatial relationships between streets and other features, and the folium library to visualize the results on an interactive map."
"Generate Python code that imports the required libraries, creates a function that takes a list of header names and values as input, and returns a dictionary with the headers as keys and their values as values, which can then be used to set the headers for an HTTP request using the `requests` library."
"Generate Python code that imports the necessary libraries and creates an instance of the Coinbase API client library, allowing you to interact with the Coinbase API to perform various cryptocurrency-related tasks such as retrieving account information, placing orders, and fetching real-time market data."
"Generate Python code that uses the `subprocess` module to parse the output of `git log` and `git diff` commands to extract information about changes in the CPython Misc/NEWS.d file between two versions, and then uses the `datetime` module to format the extracted information into a neatly organized table."
"Generate Python code that imports the necessary libraries for an all-in-one Python library, including modules for data manipulation, visualization, machine learning, web scraping, and more, and provides functions for various tasks such as data cleaning, feature engineering, model training, and deployment."
"Generate Python code that imports the necessary modules and creates an instance of the BookKeeperClient class, allowing you to interact with the BookKeeper cluster and perform various operations such as creating ledgers, writing data to ledgers, reading data from ledgers, and checking the status of ledgers."
"Generate Python code that imports the logging module and creates a logger that logs messages at various levels (debug, info, warning, error) to a file named \"human_logging.log\", with each message including the name of the function or method that generated it, and the name of the module where it was defined."
"Generate Python code that uses natural language processing techniques to parse and format recurring events from text data, leveraging libraries such as NLTK or spaCy for tokenization, part-of-speech tagging, and named entity recognition, and utilizing templates or string formatting to create structured output."
"Generate Python code that imports the necessary libraries for interacting with Coralogix, sets up authentication credentials, creates a client object to interface with the API, and uses the client to perform various tasks such as creating a new trace, adding data to an existing trace, and retrieving trace data."
"Generate Python code that uses libraries like BeautifulSoup and requests to extract ISBNs from book websites, then cleans and transforms the data using String manipulation and RegEx, Hyphenates the ISBNs using a custom function, and adds metadata such as title, author, and publisher using a database or API calls."
"Generate Python code that imports the necessary libraries for building high-quality datasets and computer vision models, such as NumPy, Pillow, and OpenCV, and creates a function that loads, preprocesses, and splits an image dataset into training, validation, and test sets using FiftyOne's data augmentation techniques."
"Generate Python code that imports the itertools library and uses the chain() function to create a generator expression that generates gapless sequences of integer values, starting from a given start value and ending at a given end value, and then uses the list() function to convert the generator expression into a list."
"Generate Python code that imports the necessary modules and sets up an API client for interacting with Tencent Cloud Tkgdq services, including configuring credentials and setting up authentication, creating and managing databases, and performing data processing and analysis tasks using Tencent Cloud's big data technologies."
"Generate Python code that imports the necessary libraries, such as PyTorch and numpy, and defines a class called AudioDataAugmenter that inherits from PyTorch.utils.data.Dataset and implements methods to perform various audio data augmentation techniques, such as time stretching, pitch shifting, and noise injection, on audio data."
"Generate Python code that imports IPython notebooks as modules using the `import_ipynb` function from the `IPython.nbtools` module, like this:\n```\nfrom IPython.nbtools import import_ipynb\n```\nThis will allow you to import an IPython notebook file as a Python module, giving you access to its contents as variables and functions."
"Generate Python code that imports the necessary libraries and creates a function that takes in a dataset and returns a dictionary with metrics for data quality, such as missing values, invalid values, and inconsistent data, using techniques such as statistical methods and machine learning algorithms to detect anomalies and outliers."
"Generate Python code that imports the asyncio module and creates a throttler function that takes a callable function and a maximum number of concurrent executions as arguments, and uses asyncio.gather to run the function up to the maximum number of times in parallel, while also providing a way to stop the throttler using a cancelation token."
"Generate Python code that imports the necessary libraries and creates a client object to interact with Google data APIs, such as the Google Sheets API, Google Drive API, or Google Calendar API, by calling various methods and functions provided by the client object to perform operations like creating, reading, updating, and deleting resources."
"Generate Python code that imports the required modules and annotates the Chime service client using mypy-boto3-builder as follows:\n```python\nfrom typing import Callable, Dict, List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\nannotated_chime_service = TypeAnnotator(Chime=True)(boto3.client('chime'))\n```"
"Generate Python code that imports the required modules and annotates the IAM 2.9.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom aiobotocore.services.iam import IAM\nfrom aiobotocore.client import Client\nfrom mypy_boto3_builder import Builder\n\nBuilder(service=IAM, version='2.9.0', client=Client).annotate()\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.kendra service client in version 1.34.0 using mypy-boto3-builder version 7.21.0, like so:\n```python\nfrom typing import TypeVar\nfrom mypy_boto3_builder import botofill\nimport boto3\n\n# Annotate boto3.kendra service client\nclient = boto3.client('kendra', version='1.34.0')\n```"
"Generate Python code that uses the `pytest` framework to perform mutation testing on a given Python 3 module, by creating a test file with a test function that calls the `pytest.main()` function and passes it the name of the module to test, and then runs the test using the `--mutate` option to apply random mutations to the code and checks for unexpected failures or errors."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.CodeArtifact 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import Client\nfrom mypy_boto3_builder import TypeAnnotator\n\nannotator = TypeAnnotator(Client)\nannotator.annotate_module('boto3.codeartifact')\n```"
"Generate Python code that imports the necessary libraries and creates a tensor-based unified framework for large-scale data computation, similar to MARS, by defining a set of core components including data ingestion, computation graphs, and optimization modules, and implementing a system for scaling up computations using distributed processing and memory management techniques."
"Generate Python code that imports the required modules and annotates the types for the boto3.AccessAnalyzer 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Optional\nfrom botocore.client import Client\nfrom mypy_boto3_builder import TypeAnnotator\n\nann = TypeAnnotator(Client)\naccess_analyzer = ann.annotate(boto3.client('access-analyzer'))\n```"
"Generate Python code that creates a script called `forensic_artifact_collector.py` that uses the `pydantic` library to define a custom data structure for representing forensic artifacts, and then uses the `psutil` and `pyfakefs` libraries to gather various types of forensic artifacts from a given disk image or live system and store them in the custom data structure for later analysis."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.Backup service in version 1.34.0 using mypy-boto3-builder version 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\nannotator = TypeAnnotator(BaseClient)\n Backup = annotator.annotate(boto3.client('backup'))\n```"
"Generate Python code that imports the json module and creates a function flatten_json() which takes a JSON object as input, recursively iterates through its keys and values, and returns a dictionary of pairs where the keys are the original keys and the values are the flattened versions of the nested JSON objects; And also create an inverse function called unflatten_json() that does the opposite."
"Generate Python code that imports the required modules and annotates the AppStream 1.34.5 service using mypy-boto3-builder 7.23.0, like so:\n```python\nfrom typing import Tuple\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import ServiceBuilder\n\nappstream = ServiceBuilder(\n   client=BaseClient,\n   service_name='appstream',\n   version='1.34.5',\n   builder_version='7.23.0'\n)\n```"
"Generate Python code that imports the necessary libraries and creates a class called `GooglePlaces` that takes an API key as a constructor argument, allows you to make requests to the Google Places API using methods such as `search_places()` and `get_place()` that return Place objects representing the results of the request, and provides convenience methods for parsing the response data into useful formats."
"Generate Python code that imports the necessary modules and annotates the types of the boto3.HealthLake service using mypy-boto3-builder, like this:\n```\nfrom typing import Optional\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import type_annotations as ta\n\n@ta.generated()\nclass HealthLake(BaseClient):\n   def __init__(self, config: dict) -> None:\n       super().__init__(config)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.RDSDataService 1.34.6 service using mypy-boto3-builder 7.23.0, like this:\n```python\nfrom typing import Callable, Dict, List, Optional, Tuple\nfrom boto3.rdsdataservice import RDSDataService\n\nrs = RDSDataService(\n   config=None,\n   endpoint=\"https://rds.us-east-1.amazonaws.com\",\n   region_name=\"us-east-1\"\n)\n```"
"Generate Python code that imports the required modules and annotates the types of the ElasticTranscoder service in boto3 version 1.34.0 using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom elastictranscoder import ElasticTranscoder\n\n# Annotate the types of the ElasticTranscoder service\nec = ElasticTranscoder(client=BaseClient)\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.WorkDocs 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import List, Dict\nfrom boto3 import ServiceResource, client\nfrom mypy_boto3_builder import BotoflowTypedClient\n\n# Annotate the types for the boto3.WorkDocs 1.34.0 service\nwork_docs_client = BotoflowTypedClient('work_docs', '1.34.0')\n```"
"Generate Python code that imports the necessary modules and annotates the types of the boto3 IoT 1.34.17 service using mypy-boto3-builder 7.23.1, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import Client\nfrom boto3.iot import IoT\n\niot = IoT(\n   client=Client(\n       config={\n           \"region\": \"us-west-2\",\n           \"credentials\": None,\n       }\n   ),\n   region=\"us-west-2\"\n)\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.ApplicationDiscoveryService 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import TypeVar, Generic\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import Botofiler\n\napp_discovery_service = Botofiler(\n   service=\"application-discovery\",\n   version=\"1.34.0\",\n   client=BaseClient,\n)\n```"
"Generate Python code that imports the required modules and annotates the ACM 2.9.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Optional\nfrom aiobotocore import AiobotocoreClient\nfrom aiobotocore.acm import ACM\n\nclient = AiobotocoreClient(\n   aws_access_key_id=\"<your_aws_access_key_id>\",\n   aws_secret_access_key=\"<your_aws_secret_access_key>\",\n   region=\"us-west-2\"\n)\n\nacm = ACM(client)\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.DataSync service using mypy-boto3-builder, like this:\n```\nfrom typing import Optional\nfrom mypy_boto3_builder import TypeAnnotator\n\nannotator = TypeAnnotator(modules=[\"boto3\"], version=\"1.34.0\")\n\n# Annotate the types of the DataSync service\nservice = annotator.get_service(\"DataSync\")\n\n# Print the annotated type definitions\nprint(service)\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3 LexRuntimeService client in version 1.34.0 using mypy-boto3-builder version 7.21.0, like so:\n```python\nfrom typing import Callable, Dict, List\nfrom botocore.client import BaseClient\nfrom boto3.lex_runtime_service import LexRuntimeService\nfrom mypy_boto3_builder import MyPyBoto3Builder\n\nbuilder = MyPyBoto3Builder(LexRuntimeService)\nbuilder.generate_type_annotations()\n```"
"Generate Python code that imports the necessary modules and annotates the XRay 1.34.0 service with type hints using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom boto3.xray import XRayService\n\nxray_service = XRayService(\n   client=BaseClient(\n       aws_access_key_id='YOUR_AWS_ACCESS_KEY',\n       aws_secret_access_key='YOUR_AWS_SECRET_KEY',\n       aws_session_token='YOUR_AWS_SESSION_TOKEN',\n   ),\n)\n```"
"Generate Python code that creates a pytest wrapper with fixtures for Playwright to automate web browsers:\n```python\nimport pytest\nfrom playwright.sync import Playwright\n\n@pytest.fixture(scope='function')\ndef playwright():\n   return Playwright()\n\n@pytest.mark.parametrize('url', ['http://example.com', 'https://example.com'])\ndef test_browser(playwright, url):\n   browser = playwright.chromium.launch(url=url)\n   assert browser.title() == 'Example Domain'\n   browser.close()\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.CloudHSMV2 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Tuple\nfrom botocore.client import BaseClient\nfrom boto3.cloudhsmv2 import CloudHSMV2\n\n# Annotate the types of the CloudHSMV2 service\nclass CloudHSMV2(BaseClient):\n   def __init__(self, *args, **kwargs) -> None:\n       super().__init__(*args, **kwargs)\n       self.config = kwargs['config']\n       self.client_name = 'cloudhsmv2'\n\n   # ... (other methods and properties) ...\n```"
"Generate Python code that imports the required modules and annotates the types of the boto3.GroundStation service using mypy-boto3-builder, like so:\n```python\nfrom typing import TypeVar\nfrom mypy_boto3_builder import TypeAnnotator\n\n# Initialize the type annotator\nta = TypeAnnotator()\n\n# Annotate the boto3.GroundStation service\ngs = ta.annotate(boto3.client(\"groundstation\"), GroundStation)\n```\nThis code imports the `mypy_boto3_builder` module, which provides a type annotator class called `TypeAnnotator`. The `TypeAnnotator` instance is then used to annotate the `boto3.client(\"groundstation\")` object, casting it to a `GroundStation` type. This generates Python code that includes type hints for the methods and properties of the `GroundStation` service."
"Generate Python code that imports the Flask module and creates a basic Flask app with pagination support using the `Flask_Pager` class from the `flask_paginate` library, like this:\n```\nfrom flask import Flask; from flask_paginate import Flask_Pager\napp = Flask(__name__)\napp.config['PAGINATE_BLUEPRINT'] = 'my_blueprint'\ndb = MySQL('user', 'password', 'localhost')\nclass MyModel(db.Model):\n   __tablename__ = 'my_table'\n   id = Column(Integer, primary_key=True)\n   name = Column(String(100))\n   created_at = Column(DateTime, default=datetime.utcnow())\n   updated_at = Column(DateTime, default=datetime.utcnow())\n\n@app.route('/')\ndef index():\n   pager = Flask_Pager(MyModel, per_page=10)\n   return render_template('index.html', pager=pager)\n\nif __name__ == '__main__':\n   app"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.Kinesis 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom boto3 import KinesisClient\n\n# Define type annotations for boto3.Kinesis 1.34.0 service\nclass KinesisClient(object):\n   def __init__(self, *, config: Optional[dict] = None) -> None:\n       self.config = config\n   \n   def create_stream(self, *, stream_name: str, shard_count: int, **kwargs) -> dict:\n       pass\n   \n   def describe_stream(self, *, stream_name: str, **kwargs) -> dict:\n       pass\n   \n   def list_streams(self, *, limit: int = None, **kwargs) -> list:\n       pass\n   \n   def put_record(self, *, stream_name: str, data: bytes, partition_key: str, **kwargs) -> dict"
"Generate Python code that imports the required modules and annotates the types for the OpenSearchService client in boto3 version 1.34.13 using mypy-boto3-builder version 7.23.0, like this:\n```\nfrom typing import Callable\nfrom botocore.client import BaseClient\nfrom boto3.s3.transfer import S3Transfer\nfrom boto3.s3.bucket import Bucket\nfrom boto3.s3.key import Key\nfrom boto3.s3.prefix import Prefix\nfrom boto3.s3.query_string import QueryString\nfrom boto3.s3.response import Response\nfrom boto3.s3.error import S3Error\nfrom boto3.s3.utils import convert_to_s3_objects\n\nclass OpenSearchService(BaseClient):\n   def __init__(self, *, config: dict = None, **kwargs) -> None:\n       super().__init__(config=config, **kwargs)\n       self.base_url = \"https://opensearch.org\"\n       self.s3"
"Generate Python code that imports the necessary modules and annotates the types of the IoTSecureTunneling service, version 1.34.0, using mypy-boto3-builder version 7.21.0, like this:\n```python\nfrom typing import Callable, Dict, List, Optional\nfrom botocore.client import BaseClient\nfrom boto3.iot import IoTSecureTunneling\n\n# Define the type annotations for the IoTSecureTunneling service\nclass IoTSecureTunneling(BaseClient):\n   def __init__(self, *args, **kwargs) -> None:\n       super().__init__(*args, **kwargs)\n\n   def create_tunnel(self, *, tunnel_id: str, host: str, port: int, protocol: str = \"https\") -> Dict[str, str]:\n       pass\n\n   def list_tunnels(self, *, next_token: str = \"\") -> List[Dict[str, str]]:\n       pass\n\n   def describe_tunnel(self, *, tunnel_id: str) ->"
"Generate Python code that uses the rtf module to parse RTF encapsulated HTML in MSG emails and extracts the HTML content, example code:\n```\nimport rtf\n\ndef extract_html(msg_file):\n   # Open the MSG file using rtf.RTFFile\n   with open(msg_file, \"rb\") as f:\n       msg = rtf.RTFFile(f)\n   \n   # Extract the RTF formatted text\n   text = msg.get_text()\n   \n   # Find all occurrences of HTML tags in the text\n   html_tags = re.findall(r\"\\<\\w+\\>.*?\\</\\w+\\>\", text)\n   \n   # Join the HTML tags into a single string\n   html_content = \"\\n\".join(html_tags)\n   \n   return html_content\n\n# Test the function with a sample MSG file\nmsg_file = \"path/to/sample.msg\"\nprint(extract_html(msg_file))\n```\nThis code will read an MSG file, extract the RTF formatted text, and then use regular expressions"
"Generate Python code that imports the necessary modules and annotates the types of the boto3.CodeStarConnections 1.34.10 service using mypy-boto3-builder 7.23.0, like this:\n```\nfrom typing import List\nfrom botocore.client import BaseClient\nfrom mypy_boto3_builder import TypeAnnotator\n\nclass CodeStarConnections(BaseClient):\n   def __init__(self, *args, **kwargs):\n       pass\n\n   @TypeAnnotator()\n   def list_connections(self) -> List[Connection]:\n       pass\n\n   @TypeAnnotator()\n   def create_connection(self, connection_input: ConnectionInput) -> Connection:\n       pass\n\n   @TypeAnnotator()\n   def delete_connection(self, connection_id: str) -> None:\n       pass\n\n   @TypeAnnotator()\n   def update_connection(self, connection_id: str, connection_input: ConnectionInput) -> Connection:\n       pass\n```"
"Generate Python code that imports the required modules and annotates the types for the boto3.DLM 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\n```python\nfrom typing import Optional\nfrom boto3 import DLM\n\n# Define type aliases for the module\n_DLM = DLM\n_ListResponse = List[dict]\n_UpdateLifecycleEventArgs = dict\n\n# Annotate the DLM constructor\nDLM = _DLM(\n   client=client,\n   config=config,\n   **kwargs\n)\n\n# Annotate the DLM methods\ndef list_lifecycle_transitions(\n       self,\n       *,\n       lifecycle_transition_type: str,\n       next_token: Optional[str] = None,\n       **kwargs\n) -> _ListResponse:\n   return self.client.list_lifecycle_transitions(\n       lifecycle_transition_type,\n       next_token,\n       **kwargs\n   )\n\ndef update_lifecycle_transition(\n       self,\n       *,\n"
"Generate Python code that uses the `ssl` module to validate X.509 certificates and paths, for example:\n```\nimport ssl\n\ndef validate_certificate(certificate):\n   \"\"\"\n   Validates an X.509 certificate\n   :param certificate: str, the path to the certificate file\n   :return: bool, whether the certificate is valid or not\n   \"\"\"\n   cert = ssl.create_default_context()\n   cert.check_filename(certificate)\n   return cert.verify()\n\ndef validate_path(certificate_chain):\n   \"\"\"\n   Validates an X.509 certificate path\n   :param certificate_chain: list of str, the paths to the certificates in the chain\n   :return: bool, whether the certificate path is valid or not\n   \"\"\"\n   certs = [ssl.create_default_context().load_certificate(cert) for cert in certificate_chain]\n   return ssl.create_default_context(). verify_chain(certs)\n```"
"Generate Python code that imports the necessary modules and annotates the types of the PinpointSMSVoice 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\n```python\nfrom typing import Optional\nfrom botocore.client import Client\nfrom boto3.sms_voice import PinpointSMSVoice\n\n# Define type annotations for the PinpointSMSVoice service\nclass PinpointSMSVoiceClient(Client):\n   def __init__(self, *args, **kwargs) -> None:\n       super().__init__(*args, **kwargs)\n       self.config = kwargs['config']\n   \n   # Define type annotations for methods\n   def send_message(self, message: dict, *, origination_ Identity: str = UNSET, notification_type: str = UNSET, tags: list[str] = UNSET) -> dict:\n       return self.call('send_message', message=message, origination_identity=origination_Identity, notification_type=notification_type, tags=tags)\n```"
"Generate Python code that imports the required libraries and creates a Pydantic class for an OpenAPI (v3) specification schema using `pydantic. BaseModel`:\n```python\nfrom pydantic import BaseModel\nfrom typing import TypeVar, generic\nimport json\n\nclass OpenAPI(BaseModel):\n   title: str\n   description: str\n   version: str\n   servers: List[Server]\n   paths: dict[str, PathItem]\n   definitions: dict[str, Definition]\n\nclass Server(BaseModel):\n   url: str\n   description: str\n   variables: dict[str, Variable]\n\nclass PathItem(BaseModel):\n   $ref: str\n   get: dict[str, Operation]\n   post: dict[str, Operation]\n   put: dict[str, Operation]\n   delete: dict[str, Operation]\n\nclass Operation(BaseModel):\n   summary: str\n   description: str\n   responses: dict[int, Response]\n\nclass Response(BaseModel):\n   status_code: int\n   description: str\n   content: dict[str, MediaType]\n\nclass"
"Generate Python code that imports the blazingly fast DataFrame library and creates a new DataFrame from a CSV file."
"Generate Python code that imports the necessary modules and creates a Datadog dashboard with Dagster framework components."
"Generate Python code that uses the `pytest` framework to write tests for database migration scripts created with `alembic`."
"Generate Python code that uses the `pydanny` library to create API documentation in Markdown format from Python modules and packages."
"Generate Python code that creates a fake database with snowflake-like data using a library such as Faker or Django model factory boy."
"Generate Python code that imports the necessary modules, creates an HDFS connection, and loads data from HDFS into a Pandas DataFrame."
"Generate Python code that creates a database-backed asynchronous task queue using the `asyncq` library and a SQL database of your choice."
"Generate Python code that uses the PyPDF2 library to convert PDF files to DOCX format, using the Docxgen library to create the DOCX file."
"Generate Python code that uses the `requests` library to send a HTTP request to the AWS Lambda function, similar to how `curl` would be used."
"Generate Python code that imports the `backports_abc` module and creates typing stubs for its functions and classes, using the `typing` module."
"Generate Python code that creates a dictionary-like cache module that stores data in files, allowing for efficient caching and retrieval of data."
"Generate Python code that reads in Ribo-Seq data, applies a unit step transformation to the data, and outputs the transformed data in a new file."
"Generate Python code that imports the necessary modules, creates a JACK client instance, and sets up a callback function to handle message events."
"Generate Python code that imports the necessary modules and creates a Datadog provider for Terraform CDK (cdktf) using the prebuilt Datadog provider."
"Generate Python code that creates an XBlock for a course, with a title, a description, and a button that triggers a JavaScript function when clicked."
"Generate Python code that imports the necessary AWS CDK modules and creates a cross-region global Aurora RDS database using the CDK construct library."
"Generate Python code that uses the `cffi` module to create typing stubs for a C library, allowing for type-safe interaction with the library in Python."
"Generate Python code that creates a simple web framework for learning purposes, including routing, template rendering, and basic HTTP request handling."
"Generate Python code that imports the Apache DataSketches Library and creates a Sketch object to estimate the frequency of unique elements in a dataset."
"Generate Python code that imports the logging module and creates a custom logger class with a low-boilerplate logging function for library method calls."
"Generate Python code that imports the Google Cloud Pub/Sub client library and creates a client object to interact with the Google Cloud Pub/Sub service."
"Generate Python code that creates pretty tables in the terminal using the `terminaltables` library, import it, and create a table with headers and data."
"Generate Python code that creates an HTML file with a JavaScript component that has an ActionScript 3-like interface, using apysc as the frontend library."
"Generate Python code that creates an open table format for huge analytic datasets using Apache Iceberg, allowing for efficient querying and data analysis."
"Generate Python code that imports the sip module and uses it to create a PyQt6 application with the same functionality as the original package description."
"Generate Python code that imports the necessary modules and creates a simple typing stub for the popular Python library \"tqdm\" using the \"typing\" module."
"Generate Python code that imports the necessary libraries and creates a Google Cloud Functions client object to interact with the Google Cloud Functions API."
"Generate Python code that creates a composable command line interface toolkit using the `click` library and the `asyncio` module for asynchronous functionality."
"Generate Python code that implements a simple JavaScript interpreter using the `ast` module to parse JavaScript code and execute it using the `exec()` function."
"Generate Python code that imports the requests library and creates a session object to send HTTP requests with customizable headers, authentication, and cookies."
"Generate Python code that imports the necessary libraries, creates a Stardog database connection, and executes a SPARQL query to retrieve data from the database."
"Generate Python code that imports the faker library and uses its \"phone_number\" function to generate a phone number in E164 format, like \"+1 (800) 123-4567\"."
"Generate Python code that imports the `uuid` module and creates a new time-based UUID format suitable for use as a database key, such as `uuid.time_based_uuid()`"
"Generate Python code that uses the whois library to retrieve WHOIS information for a given domain name, and print the resulting data in a neatly formatted table."
"Generate Python code that creates an interactive grid for sorting and filtering DataFrames in Jupyter Notebook using the ipywidgets library and the pandas library."
"Generate Python code that imports the inspect module and creates a signature object for a function, allowing you to manipulate and analyze the function's signature."
"Generate Python code that creates a CloudFormation template using the AWS CDK library to define a stack, resources, and dependencies for a scalable web application."
"Generate Python code that creates a CDK construct for an AWS Lambda function using the CDK library, specifying the function name, runtime, memory size, and handler."
"Generate Python code that uses the `pytest` framework to create a custom plugin for printing summary data in a specific format, using the `pytest.plugin` mechanism."
"Generate Python code that creates a command-line interface for interacting with the Soda Core library, which provides tools for data transformation and manipulation."
"Generate Python code that uses the Dagster API to create, run, and manage data pipelines, leveraging dbt's data transformation capabilities within a Dagster workflow."
"Generate Python code that imports the YAML module and extends the pydantic library with YAML support by adding a new mode for loading and dumping data in YAML format."
"Generate Python code that creates a metadata storage module using Invenio-Records, allowing users to store, manage, and retrieve metadata for various digital objects."
"Generate Python code that creates a template renderer that takes a template file and a dictionary of variables as input, and outputs the rendered template as a string."
"Generate Python code that creates fake servers for testing using the `socket` library and customize the response data, headers, and HTTP status codes for each request."
"Generate Python code that imports the necessary modules, creates a Y-CRDT data structure using the yrs library, and provides methods for updating and querying the CRDT."
"Generate Python code that uses the Sklearn library to create a decision tree classifier, trains it on a dataset, and then uses the tree to make predictions on new data."
"Generate Python code that creates a database using SQLite, allows users to create accounts and log in, and includes a dashboard for managing user accounts and databases."
"Generate Python code that creates a signature for a Python script using the Forge library, which provides a simple way to create and manage digital signatures in Python."
"Generate Python code that imports the `scribe` module and creates a typing stub for it using the `typing` module, allowing for type-safe usage of the `scribe` functions."
"Generate Python code that creates a simple HTML GUI application with button clicks that call JavaScript functions and interact with Python code using the Pyodide library."
"Generate Python code that imports the requests library and uses it to make a GET request to a given URL, while also specifying the headers and parameters for the request."
"Generate Python code that uses the \"print\" function to print data in a columnar format, using tab separation and vertical spacing to create a clear and organized layout."
"Generate Python code that uses Django REST framework and Datatables to create a seamless integration between the two, allowing for efficient data manipulation and display."
"Generate Python code that uses PySpark to create synthetic data for testing and development purposes, including creating data frames, spark sessions, and saving data sets."
"Generate Python code that imports the necessary libraries and creates a wrapper function for each MetalFX function, allowing users to call the functions in a Pythonic way."
"Generate Python code that imports the grpc module and creates a function that takes a server_call_details argument, which is then used to create a CallCredentials instance."
"Generate Python code that imports the necessary modules, creates a VMware API client, and defines a function that takes a VM name and returns its corresponding typing stub."
"Generate Python code that imports the argparse module and creates a custom parser class with predefined arguments and cleanup functionality for simplified script execution."
"Generate Python code that uses the pandas library to create a profile report for a given DataFrame, including summary statistics, data distribution, and feature correlation."
"Generate Python code that implements a simple data-dependent workflow using the `workflow` module, defining tasks as functions and connecting them through data dependencies."
"Generate Python code that uses the scikit-learn library to create a pipeline of machine learning models, and then converts the pipeline to PMML format using the pmml library."
"Generate Python code that imports the asyncio module and creates an IMAP4rev1 client using the aioimaplib library, allowing for asynchronous email retrieval and manipulation."
"Generate Python code that uses the `pyorb` library to interact with an ORB (Object Request Broker) and perform operations such as publishing, subscribing, and requesting data."
"Generate Python code that uses machine learning algorithms to infer the date format from a set of example dates, saving the inferred format as a Python datetime format string."
"Generate Python code that reads and writes R RData and Rds files into/from pandas data frames using the pandas library and the pyarrow library for interacting with R packages."
"Generate Python code that imports the core klio library and uses its functionalities to perform common tasks such as data cleaning, feature engineering, and data manipulation."
"Generate Python code that imports the necessary modules and creates an AWS Redshift client object, allowing you to interact with your Redshift cluster using the Boto3 library."
"Generate Python code that imports the necessary modules for creating a useful tools library with classes for singletons, dynamic function pointers, and other utility functions."
"Generate Python code that imports the psycopg2 library and creates a typing stub for it using the `typing` module, allowing for type-safe interactions with PostgreSQL databases."
"Generate Python code that reformats and auto-formats robot framework test cases using a specified format, such as pytest or unittest, and supports multiple programming languages."
"Generate Python code that imports the ctypes module and wraps Bob Jenkins' hash functions in a Python class, allowing users to easily call the hash functions from Python scripts."
"Generate Python code that implements a Liquid template engine using the `pyliquid` library, allowing you to render Liquid templates with dynamic data and custom filters and tags."
"Generate Python code that imports the Cython module and creates a Python wrapper for the Brotli library, allowing users to compress and decompress data using the Brotli algorithm."
"Generate Python code that reads and writes data from/to Parquet files using the pyarrow library, which provides efficient and flexible access to data stored in the Parquet format."
"Generate Python code that imports the LOESS library and uses it to perform robust locally-weighted regression in one or two dimensions, smoothing data to create a continuous curve."
"Generate Python code that creates a markdown formatted text file with the title \"My Markdown Document\" and a list of items in a bullet point format, using the `markdown` library."
"Generate Python code that imports the necessary modules and creates a SQLAlchemy dialect for interacting with a SAP HANA database, using the `sqlalchemy` and `hanaclient` libraries."
"Generate Python code that implements a function to generate Tiny URL- and bit.ly-like URLs using the `urllib` library to truncate long URLs and create a unique shortened identifier."
"Generate Python code that uses the requests library to send HTTP GET requests to the Crossref Search API, parsing the JSON responses to extract the desired metadata for a given DOI."
"Generate Python code that imports the Flask and SQLAlchemy modules, creates a Flask app with a SQLAlchemy database connection, and configures a session scope for the Flask requests."
"Generate Python code that instruments URLlib requests using OpenTelemetry tracing, adding trace data to outgoing HTTP requests and extracting trace data from incoming HTTP responses."
"Generate Python code that creates a reproducible data science workflow using Metaflow to streamline data ingestion, transformation, and modeling while minimizing engineering efforts."
"Generate Python code that uses the `dataclasses` module to define classes representing JSON objects, and then generates JSON schemas for those classes using the `jsonschema` library."
"Generate Python code that uses the `ansible` module to parse Ansible playbooks and extract changelog information from them, then create a changelog file in the format of a YAML file."
"Generate Python code that creates a basic HTML report template for Pytest using the `pytest` and `html` modules, including a table of contents, test results, and summary information."
"Generate Python code that imports the necessary libraries and uses them to read, manipulate, and write data in ODS format, similar to the functionality provided by a wrapper library."
"Generate Python code that uses the `click` module to create a CLI application with custom commands and options, and generates man pages for the application using the `manpage` module."
"Generate Python code that imports the necessary modules for searching and indexing, such as NumPy and SciPy, and creates functions for searching and indexing data based on user input."
"Generate Python code that imports the necessary libraries and creates a wrapper function for each AdSupport function, conforming to the API defined by the AdSupport framework on macOS."
"Generate Python code that imports the necessary libraries, creates a pandas dataframe from an AWS DynamoDB table, modifies the dataframe, and writes the modified data back to DynamoDB."
"Generate Python code that imports the necessary libraries and creates a wrapper function around the isl library's functions to provide a simple interface for working with integer sets."
"Generate Python code that uses the Django REST Framework to create API endpoints for serving pandas dataframes, which can be consumed by client-side visualization libraries like d3.js."
"Generate Python code that uses the rasterio library to read a GeoTIFF file, convert it to a numpy array, and then use the matplotlib pyplot library to create a contour plot of the data."
"Generate Python code that imports the llama.cpp library and provides a simple wrapper around its functions, allowing users to interact with the library's functionality in a Pythonic way."
"Generate Python code that imports the necessary libraries and creates a Kubernetes client object to interact with a cluster, such as `import kubernetes as k8s; client = k8s.KubeClient()`"
"Generate Python code that imports the requests library and creates a Braze API client class with methods for logging in, creating and sending messages, and retrieving message statistics."
"Generate Python code that imports the necessary libraries and writes a SQL query to retrieve data from a database, using the `sqlite3` library to connect to a local SQLite database file."
"Generate Python code that creates a Django application with pagination functionality using Pagination Made Easy, allowing for easy integration of paginated data into templates and views."
"Generate Python code that imports the logging module and creates a basic logger, then defines a class that logs information about its methods and their arguments using the logging module."
"Generate Python code that imports the necessary modules for developing a package, sets up a virtual environment, creates a setup script, defines dependencies, and generates documentation."
"Generate Python code that uses the Marshmallow library to serialize and deserialize annotated data, allowing for easy handling of missing data and efficient data transfer between systems."
"Generate Python code that uses the cProfile module to collect profiling data, then uses the kcachegrind and qcachegrind libraries to visualize the data in an interactive graphical format."
"Generate Python code that uses the `wadl` library to parse a WADL file and navigate the described HTTP resources, using the `requests` library to send HTTP requests and retrieve responses."
"Generate Python code that reads and writes PLINK BED format files using the pandas library, efficiently handling large datasets and providing simple API for data manipulation and analysis."
"Generate Python code that imports the psycopg2 library and creates a connection to a PostgreSQL database, allowing for the execution of SQL queries and the manipulation of database objects."
"Generate Python code that creates a command-line interface for interacting with a data lake, allowing users to list, create, delete, and manipulate files and directories within the data lake."
"Generate Python code that imports the MySQLdb extension for Flask and creates a Flask application that connects to a MySQL database, performs CRUD operations, and returns data in JSON format."
"Generate Python code that uses the `rust_lint` library to perform linting and formatting on Python code, using the `pydantic` library to parse the code and apply the necessary transformations."
"Generate Python code that uses SQLAlchemy to create a database model from a given dataset, allowing for the automatic generation of SQL schema and Python classes for interacting with the data."
